{"ast":null,"code":"var _objectSpread = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _require = require('openid-client'),\n  generators = _require.generators;\nvar _require2 = require('./crypto'),\n  generateCookieValue = _require2.signCookie,\n  getCookieValue = _require2.verifyCookie,\n  getKeyStore = _require2.getKeyStore;\nvar COOKIES = require('./cookies');\nvar TransientCookieHandler = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function TransientCookieHandler(_ref) {\n    var secret = _ref.secret,\n      session = _ref.session,\n      legacySameSiteCookie = _ref.legacySameSiteCookie;\n    _classCallCheck(this, TransientCookieHandler);\n    var _getKeyStore = getKeyStore(secret),\n      _getKeyStore2 = _slicedToArray(_getKeyStore, 2),\n      current = _getKeyStore2[0],\n      keystore = _getKeyStore2[1];\n    if (keystore.size === 1) {\n      keystore = current;\n    }\n    this.currentKey = current;\n    this.keyStore = keystore;\n    this.sessionCookieConfig = session && session.cookie || {};\n    this.legacySameSiteCookie = legacySameSiteCookie;\n  }\n\n  /**\n   * Set a cookie with a value or a generated nonce.\n   *\n   * @param {String} key Cookie name to use.\n   * @param {Object} req Express Request object.\n   * @param {Object} res Express Response object.\n   * @param {Object} opts Options object.\n   * @param {String} opts.sameSite SameSite attribute of \"None,\" \"Lax,\" or \"Strict\". Default is \"None.\"\n   * @param {String} opts.value Cookie value. Omit this key to store a generated value.\n   * @param {Boolean} opts.legacySameSiteCookie Should a fallback cookie be set? Default is true.\n   *\n   * @return {String} Cookie value that was set.\n   */\n  _createClass(TransientCookieHandler, [{\n    key: \"store\",\n    value: function store(key, req, res) {\n      var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$sameSite = _ref2.sameSite,\n        sameSite = _ref2$sameSite === void 0 ? 'None' : _ref2$sameSite,\n        _ref2$value = _ref2.value,\n        value = _ref2$value === void 0 ? this.generateNonce() : _ref2$value;\n      var isSameSiteNone = sameSite === 'None';\n      var _this$sessionCookieCo = this.sessionCookieConfig,\n        domain = _this$sessionCookieCo.domain,\n        path = _this$sessionCookieCo.path,\n        secure = _this$sessionCookieCo.secure;\n      var basicAttr = {\n        httpOnly: true,\n        secure: secure,\n        domain: domain,\n        path: path\n      };\n      {\n        var cookieValue = generateCookieValue(key, value, this.currentKey);\n        // Set the cookie with the SameSite attribute and, if needed, the Secure flag.\n        res.cookie(key, cookieValue, _objectSpread({}, basicAttr, {\n          sameSite: sameSite,\n          secure: isSameSiteNone ? true : basicAttr.secure\n        }));\n      }\n      if (isSameSiteNone && this.legacySameSiteCookie) {\n        var _cookieValue = generateCookieValue(\"_\".concat(key), value, this.currentKey);\n        // Set the fallback cookie with no SameSite or Secure attributes.\n        res.cookie(\"_\".concat(key), _cookieValue, basicAttr);\n      }\n      return value;\n    }\n    /**\n     * Get a cookie value then delete it.\n     *\n     * @param {String} key Cookie name to use.\n     * @param {Object} req Express Request object.\n     * @param {Object} res Express Response object.\n     *\n     * @return {String|undefined} Cookie value or undefined if cookie was not found.\n     */\n  }, {\n    key: \"getOnce\",\n    value: function getOnce(key, req, res) {\n      if (!req[COOKIES]) {\n        return undefined;\n      }\n      var _this$sessionCookieCo2 = this.sessionCookieConfig,\n        secure = _this$sessionCookieCo2.secure,\n        sameSite = _this$sessionCookieCo2.sameSite;\n      var value = getCookieValue(key, req[COOKIES][key], this.keyStore);\n      this.deleteCookie(key, res, {\n        secure: secure,\n        sameSite: sameSite\n      });\n      if (this.legacySameSiteCookie) {\n        var fallbackKey = \"_\".concat(key);\n        if (!value) {\n          value = getCookieValue(fallbackKey, req[COOKIES][fallbackKey], this.keyStore);\n        }\n        this.deleteCookie(fallbackKey, res);\n      }\n      return value;\n    }\n    /**\n     * Generates a nonce value.\n     *\n     * @return {String}\n     */\n  }, {\n    key: \"generateNonce\",\n    value: function generateNonce() {\n      return generators.nonce();\n    }\n    /**\n     * Generates a code_verifier value.\n     *\n     * @return {String}\n     */\n  }, {\n    key: \"generateCodeVerifier\",\n    value: function generateCodeVerifier() {\n      return generators.codeVerifier();\n    }\n    /**\n     * Calculates a code_challenge value for a given codeVerifier\n     *\n     * @param {String} codeVerifier Code Verifier to calculate the code_challenge value from.\n     *\n     * @return {String}\n     */\n  }, {\n    key: \"calculateCodeChallenge\",\n    value: function calculateCodeChallenge(codeVerifier) {\n      return generators.codeChallenge(codeVerifier);\n    }\n    /**\n     * Clears the cookie from the browser by setting an empty value and an expiration date in the past\n     *\n     * @param {String} name Cookie name\n     * @param {Object} res Express Response object\n     * @param {Object?} opts Optional SameSite and Secure cookie options for modern browsers\n     */\n  }, {\n    key: \"deleteCookie\",\n    value: function deleteCookie(name, res) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$sessionCookieCo3 = this.sessionCookieConfig,\n        domain = _this$sessionCookieCo3.domain,\n        path = _this$sessionCookieCo3.path;\n      var sameSite = opts.sameSite,\n        secure = opts.secure;\n      res.clearCookie(name, {\n        domain: domain,\n        path: path,\n        sameSite: sameSite,\n        secure: secure\n      });\n    }\n  }]);\n  return TransientCookieHandler;\n}();\nmodule.exports = TransientCookieHandler;","map":null,"metadata":{},"sourceType":"script"}