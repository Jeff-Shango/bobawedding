{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _objectSpread = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar http2 = require('http2');\nvar _require = require('stream'),\n  Writable = _require.Writable;\nvar _require2 = require('./agent'),\n  Agent = _require2.Agent,\n  globalAgent = _require2.globalAgent;\nvar IncomingMessage = require('./incoming-message');\nvar urlToOptions = require('./utils/url-to-options');\nvar proxyEvents = require('./utils/proxy-events');\nvar isRequestPseudoHeader = require('./utils/is-request-pseudo-header');\nvar _require3 = require('./utils/errors'),\n  ERR_INVALID_ARG_TYPE = _require3.ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_PROTOCOL = _require3.ERR_INVALID_PROTOCOL,\n  ERR_HTTP_HEADERS_SENT = _require3.ERR_HTTP_HEADERS_SENT,\n  ERR_INVALID_HTTP_TOKEN = _require3.ERR_INVALID_HTTP_TOKEN,\n  ERR_HTTP_INVALID_HEADER_VALUE = _require3.ERR_HTTP_INVALID_HEADER_VALUE,\n  ERR_INVALID_CHAR = _require3.ERR_INVALID_CHAR;\nvar _http2$constants = http2.constants,\n  HTTP2_HEADER_STATUS = _http2$constants.HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_METHOD = _http2$constants.HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH = _http2$constants.HTTP2_HEADER_PATH,\n  HTTP2_METHOD_CONNECT = _http2$constants.HTTP2_METHOD_CONNECT;\nvar kHeaders = Symbol('headers');\nvar kOrigin = Symbol('origin');\nvar kSession = Symbol('session');\nvar kOptions = Symbol('options');\nvar kFlushedHeaders = Symbol('flushedHeaders');\nvar kJobs = Symbol('jobs');\nvar isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nvar isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nvar ClientRequest = /*#__PURE__*/function (_Writable) {\n  _inherits(ClientRequest, _Writable);\n  function ClientRequest(input, options, callback) {\n    var _this;\n    _classCallCheck(this, ClientRequest);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClientRequest).call(this, {\n      autoDestroy: false\n    }));\n    var hasInput = typeof input === 'string' || input instanceof URL;\n    if (hasInput) {\n      input = urlToOptions(input instanceof URL ? input : new URL(input));\n    }\n    if (typeof options === 'function' || options === undefined) {\n      // (options, callback)\n      callback = options;\n      options = hasInput ? input : _objectSpread({}, input);\n    } else {\n      // (input, options, callback)\n      options = _objectSpread({}, input, options);\n    }\n    if (options.h2session) {\n      _this[kSession] = options.h2session;\n    } else if (options.agent === false) {\n      _this.agent = new Agent({\n        maxFreeSessions: 0\n      });\n    } else if (typeof options.agent === 'undefined' || options.agent === null) {\n      if (typeof options.createConnection === 'function') {\n        // This is a workaround - we don't have to create the session on our own.\n        _this.agent = new Agent({\n          maxFreeSessions: 0\n        });\n        _this.agent.createConnection = options.createConnection;\n      } else {\n        _this.agent = globalAgent;\n      }\n    } else if (typeof options.agent.request === 'function') {\n      _this.agent = options.agent;\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('options.agent', ['Agent-like Object', 'undefined', 'false'], options.agent);\n    }\n    if (options.protocol && options.protocol !== 'https:') {\n      throw new ERR_INVALID_PROTOCOL(options.protocol, 'https:');\n    }\n    var port = options.port || options.defaultPort || _this.agent && _this.agent.defaultPort || 443;\n    var host = options.hostname || options.host || 'localhost';\n\n    // Don't enforce the origin via options. It may be changed in an Agent.\n    delete options.hostname;\n    delete options.host;\n    delete options.port;\n    var _options = options,\n      timeout = _options.timeout;\n    options.timeout = undefined;\n    _this[kHeaders] = Object.create(null);\n    _this[kJobs] = [];\n    _this.socket = null;\n    _this.connection = null;\n    _this.method = options.method || 'GET';\n    _this.path = options.path;\n    _this.res = null;\n    _this.aborted = false;\n    _this.reusedSocket = false;\n    if (options.headers) {\n      for (var _i = 0, _Object$entries = Object.entries(options.headers); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          header = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        _this.setHeader(header, value);\n      }\n    }\n    if (options.auth && !('authorization' in _this[kHeaders])) {\n      _this[kHeaders].authorization = 'Basic ' + Buffer.from(options.auth).toString('base64');\n    }\n    options.session = options.tlsSession;\n    options.path = options.socketPath;\n    _this[kOptions] = options;\n\n    // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n    if (port === 443) {\n      _this[kOrigin] = \"https://\".concat(host);\n      if (!(':authority' in _this[kHeaders])) {\n        _this[kHeaders][':authority'] = host;\n      }\n    } else {\n      _this[kOrigin] = \"https://\".concat(host, \":\").concat(port);\n      if (!(':authority' in _this[kHeaders])) {\n        _this[kHeaders][':authority'] = \"\".concat(host, \":\").concat(port);\n      }\n    }\n    if (timeout) {\n      _this.setTimeout(timeout);\n    }\n    if (callback) {\n      _this.once('response', callback);\n    }\n    _this[kFlushedHeaders] = false;\n    return _this;\n  }\n  _createClass(ClientRequest, [{\n    key: \"_write\",\n    value: function _write(chunk, encoding, callback) {\n      var _this2 = this;\n      // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n      if (this._mustNotHaveABody) {\n        callback(new Error('The GET, HEAD and DELETE methods must NOT have a body'));\n        /* istanbul ignore next: Node.js 12 throws directly */\n        return;\n      }\n      this.flushHeaders();\n      var callWrite = function callWrite() {\n        return _this2._request.write(chunk, encoding, callback);\n      };\n      if (this._request) {\n        callWrite();\n      } else {\n        this[kJobs].push(callWrite);\n      }\n    }\n  }, {\n    key: \"_final\",\n    value: function _final(callback) {\n      var _this3 = this;\n      if (this.destroyed) {\n        return;\n      }\n      this.flushHeaders();\n      var callEnd = function callEnd() {\n        // For GET, HEAD and DELETE\n        if (_this3._mustNotHaveABody) {\n          callback();\n          return;\n        }\n        _this3._request.end(callback);\n      };\n      if (this._request) {\n        callEnd();\n      } else {\n        this[kJobs].push(callEnd);\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      var _this4 = this;\n      if (this.res && this.res.complete) {\n        return;\n      }\n      if (!this.aborted) {\n        process.nextTick(function () {\n          return _this4.emit('abort');\n        });\n      }\n      this.aborted = true;\n      this.destroy();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(error, callback) {\n      if (this.res) {\n        this.res._dump();\n      }\n      if (this._request) {\n        this._request.destroy();\n      }\n      callback(error);\n    }\n  }, {\n    key: \"flushHeaders\",\n    value: function () {\n      var _flushHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this5 = this;\n        var isConnectMethod, onStream;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this[kFlushedHeaders] || this.destroyed)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              this[kFlushedHeaders] = true;\n              isConnectMethod = this.method === HTTP2_METHOD_CONNECT; // The real magic is here\n              onStream = function onStream(stream) {\n                _this5._request = stream;\n                if (_this5.destroyed) {\n                  stream.destroy();\n                  return;\n                }\n\n                // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n                if (!isConnectMethod) {\n                  proxyEvents(stream, _this5, ['timeout', 'continue', 'close', 'error']);\n                }\n\n                // Wait for the `finish` event. We don't want to emit the `response` event\n                // before `request.end()` is called.\n                var waitForEnd = function waitForEnd(fn) {\n                  return function () {\n                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                      args[_key] = arguments[_key];\n                    }\n                    if (!_this5.writable && !_this5.destroyed) {\n                      fn.apply(void 0, args);\n                    } else {\n                      _this5.once('finish', function () {\n                        fn.apply(void 0, args);\n                      });\n                    }\n                  };\n                };\n\n                // This event tells we are ready to listen for the data.\n                stream.once('response', waitForEnd(function (headers, flags, rawHeaders) {\n                  // If we were to emit raw request stream, it would be as fast as the native approach.\n                  // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n                  var response = new IncomingMessage(_this5.socket, stream.readableHighWaterMark);\n                  _this5.res = response;\n                  response.req = _this5;\n                  response.statusCode = headers[HTTP2_HEADER_STATUS];\n                  response.headers = headers;\n                  response.rawHeaders = rawHeaders;\n                  response.once('end', function () {\n                    if (_this5.aborted) {\n                      response.aborted = true;\n                      response.emit('aborted');\n                    } else {\n                      response.complete = true;\n\n                      // Has no effect, just be consistent with the Node.js behavior\n                      response.socket = null;\n                      response.connection = null;\n                    }\n                  });\n                  if (isConnectMethod) {\n                    response.upgrade = true;\n\n                    // The HTTP1 API says the socket is detached here,\n                    // but we can't do that so we pass the original HTTP2 request.\n                    if (_this5.emit('connect', response, stream, Buffer.alloc(0))) {\n                      _this5.emit('close');\n                    } else {\n                      // No listeners attached, destroy the original request.\n                      stream.destroy();\n                    }\n                  } else {\n                    // Forwards data\n                    stream.on('data', function (chunk) {\n                      if (!response._dumped && !response.push(chunk)) {\n                        stream.pause();\n                      }\n                    });\n                    stream.once('end', function () {\n                      response.push(null);\n                    });\n                    if (!_this5.emit('response', response)) {\n                      // No listeners attached, dump the response.\n                      response._dump();\n                    }\n                  }\n                }));\n\n                // Emits `information` event\n                stream.once('headers', waitForEnd(function (headers) {\n                  return _this5.emit('information', {\n                    statusCode: headers[HTTP2_HEADER_STATUS]\n                  });\n                }));\n                stream.once('trailers', waitForEnd(function (trailers, flags, rawTrailers) {\n                  var res = _this5.res; // Assigns trailers to the response object.\n                  res.trailers = trailers;\n                  res.rawTrailers = rawTrailers;\n                }));\n                var socket = stream.session.socket;\n                _this5.socket = socket;\n                _this5.connection = socket;\n                var _iterator = _createForOfIteratorHelper(_this5[kJobs]),\n                  _step;\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    var job = _step.value;\n                    job();\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                _this5.emit('socket', _this5.socket);\n              }; // Makes a HTTP2 request\n              if (!this[kSession]) {\n                _context.next = 9;\n                break;\n              }\n              try {\n                onStream(this[kSession].request(this[kHeaders]));\n              } catch (error) {\n                this.emit('error', error);\n              }\n              _context.next = 21;\n              break;\n            case 9:\n              this.reusedSocket = true;\n              _context.prev = 10;\n              _context.t0 = onStream;\n              _context.next = 14;\n              return this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]);\n            case 14:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 21;\n              break;\n            case 18:\n              _context.prev = 18;\n              _context.t2 = _context[\"catch\"](10);\n              this.emit('error', _context.t2);\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[10, 18]]);\n      }));\n      function flushHeaders() {\n        return _flushHeaders.apply(this, arguments);\n      }\n      return flushHeaders;\n    }()\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(name) {\n      if (typeof name !== 'string') {\n        throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n      }\n      return this[kHeaders][name.toLowerCase()];\n    }\n  }, {\n    key: \"removeHeader\",\n    value: function removeHeader(name) {\n      if (typeof name !== 'string') {\n        throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n      }\n      if (this.headersSent) {\n        throw new ERR_HTTP_HEADERS_SENT('remove');\n      }\n      delete this[kHeaders][name.toLowerCase()];\n    }\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(name, value) {\n      if (this.headersSent) {\n        throw new ERR_HTTP_HEADERS_SENT('set');\n      }\n      if (typeof name !== 'string' || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n        throw new ERR_INVALID_HTTP_TOKEN('Header name', name);\n      }\n      if (typeof value === 'undefined') {\n        throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n      }\n      if (isInvalidHeaderValue.test(value)) {\n        throw new ERR_INVALID_CHAR('header content', name);\n      }\n      this[kHeaders][name.toLowerCase()] = value;\n    }\n  }, {\n    key: \"setNoDelay\",\n    value: function setNoDelay() {\n      // HTTP2 sockets cannot be malformed, do nothing.\n    }\n  }, {\n    key: \"setSocketKeepAlive\",\n    value: function setSocketKeepAlive() {\n      // HTTP2 sockets cannot be malformed, do nothing.\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(ms, callback) {\n      var _this6 = this;\n      var applyTimeout = function applyTimeout() {\n        return _this6._request.setTimeout(ms, callback);\n      };\n      if (this._request) {\n        applyTimeout();\n      } else {\n        this[kJobs].push(applyTimeout);\n      }\n      return this;\n    }\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this[kHeaders][HTTP2_HEADER_METHOD];\n    },\n    set: function set(value) {\n      if (value) {\n        this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n      }\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this[kHeaders][HTTP2_HEADER_PATH];\n    },\n    set: function set(value) {\n      if (value) {\n        this[kHeaders][HTTP2_HEADER_PATH] = value;\n      }\n    }\n  }, {\n    key: \"_mustNotHaveABody\",\n    get: function get() {\n      return this.method === 'GET' || this.method === 'HEAD' || this.method === 'DELETE';\n    }\n  }, {\n    key: \"headersSent\",\n    get: function get() {\n      return this[kFlushedHeaders];\n    }\n  }, {\n    key: \"maxHeadersCount\",\n    get: function get() {\n      if (!this.destroyed && this._request) {\n        return this._request.session.localSettings.maxHeaderListSize;\n      }\n      return undefined;\n    },\n    set: function set(_value) {\n      // Updating HTTP2 settings would affect all requests, do nothing.\n    }\n  }]);\n  return ClientRequest;\n}(Writable);\nmodule.exports = ClientRequest;","map":null,"metadata":{},"sourceType":"script"}