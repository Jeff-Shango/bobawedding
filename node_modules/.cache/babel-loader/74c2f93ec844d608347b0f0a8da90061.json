{"ast":null,"code":"\"use strict\";\n\n/// <reference lib=\"es2018\"/>\n/// <reference lib=\"dom\"/>\n/// <reference types=\"node\"/>\nvar _toConsumableArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar typedArrayTypeNames = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array'];\nfunction isTypedArrayName(name) {\n  return typedArrayTypeNames.includes(name);\n}\nvar objectTypeNames = ['Function', 'Generator', 'AsyncGenerator', 'GeneratorFunction', 'AsyncGeneratorFunction', 'AsyncFunction', 'Observable', 'Array', 'Buffer', 'Blob', 'Object', 'RegExp', 'Date', 'Error', 'Map', 'Set', 'WeakMap', 'WeakSet', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Promise', 'URL', 'FormData', 'URLSearchParams', 'HTMLElement'].concat(typedArrayTypeNames);\nfunction isObjectTypeName(name) {\n  return objectTypeNames.includes(name);\n}\nvar primitiveTypeNames = ['null', 'undefined', 'string', 'number', 'bigint', 'boolean', 'symbol'];\nfunction isPrimitiveTypeName(name) {\n  return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n  return function (value) {\n    return typeof value === type;\n  };\n}\nvar toString = Object.prototype.toString;\nvar getObjectType = function getObjectType(value) {\n  var objectTypeName = toString.call(value).slice(8, -1);\n  if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n    return 'HTMLElement';\n  }\n  if (isObjectTypeName(objectTypeName)) {\n    return objectTypeName;\n  }\n  return undefined;\n};\nvar isObjectOfType = function isObjectOfType(type) {\n  return function (value) {\n    return getObjectType(value) === type;\n  };\n};\nfunction is(value) {\n  if (value === null) {\n    return 'null';\n  }\n  switch (typeof value) {\n    case 'undefined':\n      return 'undefined';\n    case 'string':\n      return 'string';\n    case 'number':\n      return 'number';\n    case 'boolean':\n      return 'boolean';\n    case 'function':\n      return 'Function';\n    case 'bigint':\n      return 'bigint';\n    case 'symbol':\n      return 'symbol';\n    default:\n  }\n  if (is.observable(value)) {\n    return 'Observable';\n  }\n  if (is.array(value)) {\n    return 'Array';\n  }\n  if (is.buffer(value)) {\n    return 'Buffer';\n  }\n  var tagType = getObjectType(value);\n  if (tagType) {\n    return tagType;\n  }\n  if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n    throw new TypeError('Please don\\'t use object wrappers for primitive types');\n  }\n  return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nvar isNumberType = isOfType('number');\nis.number = function (value) {\n  return isNumberType(value) && !is.nan(value);\n};\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\nis.null_ = function (value) {\n  return value === null;\n};\nis.class_ = function (value) {\n  return is.function_(value) && value.toString().startsWith('class ');\n};\nis.boolean = function (value) {\n  return value === true || value === false;\n};\nis.symbol = isOfType('symbol');\nis.numericString = function (value) {\n  return is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\n};\nis.array = function (value, assertion) {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  if (!is.function_(assertion)) {\n    return true;\n  }\n  return value.every(assertion);\n};\nis.buffer = function (value) {\n  var _a, _b, _c, _d;\n  return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false;\n};\nis.blob = function (value) {\n  return isObjectOfType('Blob')(value);\n};\nis.nullOrUndefined = function (value) {\n  return is.null_(value) || is.undefined(value);\n};\nis.object = function (value) {\n  return !is.null_(value) && (typeof value === 'object' || is.function_(value));\n};\nis.iterable = function (value) {\n  var _a;\n  return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]);\n};\nis.asyncIterable = function (value) {\n  var _a;\n  return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]);\n};\nis.generator = function (value) {\n  var _a, _b;\n  return is.iterable(value) && is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.next) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.throw);\n};\nis.asyncGenerator = function (value) {\n  return is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\n};\nis.nativePromise = function (value) {\n  return isObjectOfType('Promise')(value);\n};\nvar hasPromiseAPI = function hasPromiseAPI(value) {\n  var _a, _b;\n  return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);\n};\nis.promise = function (value) {\n  return is.nativePromise(value) || hasPromiseAPI(value);\n};\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = function (value) {\n  return getObjectType(value) === 'AsyncGeneratorFunction';\n};\nis.asyncFunction = function (value) {\n  return getObjectType(value) === 'AsyncFunction';\n};\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = function (value) {\n  return is.function_(value) && !value.hasOwnProperty('prototype');\n};\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = function (value) {\n  return isObjectOfType('Map')(value);\n};\nis.set = function (value) {\n  return isObjectOfType('Set')(value);\n};\nis.weakMap = function (value) {\n  return isObjectOfType('WeakMap')(value);\n};\nis.weakSet = function (value) {\n  return isObjectOfType('WeakSet')(value);\n};\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\nis.enumCase = function (value, targetEnum) {\n  return Object.values(targetEnum).includes(value);\n};\nis.directInstanceOf = function (instance, class_) {\n  return Object.getPrototypeOf(instance) === class_.prototype;\n};\nis.urlInstance = function (value) {\n  return isObjectOfType('URL')(value);\n};\nis.urlString = function (value) {\n  if (!is.string(value)) {\n    return false;\n  }\n  try {\n    new URL(value); // eslint-disable-line no-new\n    return true;\n  } catch (_a) {\n    return false;\n  }\n};\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = function (value) {\n  return Boolean(value);\n};\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = function (value) {\n  return !value;\n};\nis.nan = function (value) {\n  return Number.isNaN(value);\n};\nis.primitive = function (value) {\n  return is.null_(value) || isPrimitiveTypeName(typeof value);\n};\nis.integer = function (value) {\n  return Number.isInteger(value);\n};\nis.safeInteger = function (value) {\n  return Number.isSafeInteger(value);\n};\nis.plainObject = function (value) {\n  // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n  if (toString.call(value) !== '[object Object]') {\n    return false;\n  }\n  var prototype = Object.getPrototypeOf(value);\n  return prototype === null || prototype === Object.getPrototypeOf({});\n};\nis.typedArray = function (value) {\n  return isTypedArrayName(getObjectType(value));\n};\nvar isValidLength = function isValidLength(value) {\n  return is.safeInteger(value) && value >= 0;\n};\nis.arrayLike = function (value) {\n  return !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\n};\nis.inRange = function (value, range) {\n  if (is.number(range)) {\n    return value >= Math.min(0, range) && value <= Math.max(range, 0);\n  }\n  if (is.array(range) && range.length === 2) {\n    return value >= Math.min.apply(Math, _toConsumableArray(range)) && value <= Math.max.apply(Math, _toConsumableArray(range));\n  }\n  throw new TypeError(\"Invalid range: \".concat(JSON.stringify(range)));\n};\nvar NODE_TYPE_ELEMENT = 1;\nvar DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\nis.domElement = function (value) {\n  return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(function (property) {\n    return property in value;\n  });\n};\nis.observable = function (value) {\n  var _a, _b, _c, _d;\n  if (!value) {\n    return false;\n  }\n  // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n  if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n    return true;\n  }\n  if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {\n    return true;\n  }\n  return false;\n};\nis.nodeStream = function (value) {\n  return is.object(value) && is.function_(value.pipe) && !is.observable(value);\n};\nis.infinite = function (value) {\n  return value === Infinity || value === -Infinity;\n};\nvar isAbsoluteMod2 = function isAbsoluteMod2(remainder) {\n  return function (value) {\n    return is.integer(value) && Math.abs(value % 2) === remainder;\n  };\n};\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = function (value) {\n  return is.array(value) && value.length === 0;\n};\nis.nonEmptyArray = function (value) {\n  return is.array(value) && value.length > 0;\n};\nis.emptyString = function (value) {\n  return is.string(value) && value.length === 0;\n};\nvar isWhiteSpaceString = function isWhiteSpaceString(value) {\n  return is.string(value) && !/\\S/.test(value);\n};\nis.emptyStringOrWhitespace = function (value) {\n  return is.emptyString(value) || isWhiteSpaceString(value);\n};\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = function (value) {\n  return is.string(value) && value.length > 0;\n};\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyStringAndNotWhitespace = function (value) {\n  return is.string(value) && !is.emptyStringOrWhitespace(value);\n};\nis.emptyObject = function (value) {\n  return is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n};\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\nis.nonEmptyObject = function (value) {\n  return is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\n};\nis.emptySet = function (value) {\n  return is.set(value) && value.size === 0;\n};\nis.nonEmptySet = function (value) {\n  return is.set(value) && value.size > 0;\n};\nis.emptyMap = function (value) {\n  return is.map(value) && value.size === 0;\n};\nis.nonEmptyMap = function (value) {\n  return is.map(value) && value.size > 0;\n};\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nis.propertyKey = function (value) {\n  return is.any([is.string, is.number, is.symbol], value);\n};\nis.formData = function (value) {\n  return isObjectOfType('FormData')(value);\n};\nis.urlSearchParams = function (value) {\n  return isObjectOfType('URLSearchParams')(value);\n};\nvar predicateOnArray = function predicateOnArray(method, predicate, values) {\n  if (!is.function_(predicate)) {\n    throw new TypeError(\"Invalid predicate: \".concat(JSON.stringify(predicate)));\n  }\n  if (values.length === 0) {\n    throw new TypeError('Invalid number of values');\n  }\n  return method.call(values, predicate);\n};\nis.any = function (predicate) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n  var predicates = is.array(predicate) ? predicate : [predicate];\n  return predicates.some(function (singlePredicate) {\n    return predicateOnArray(Array.prototype.some, singlePredicate, values);\n  });\n};\nis.all = function (predicate) {\n  for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    values[_key2 - 1] = arguments[_key2];\n  }\n  return predicateOnArray(Array.prototype.every, predicate, values);\n};\nvar assertType = function assertType(condition, description, value) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (!condition) {\n    var multipleValues = options.multipleValues;\n    var valuesMessage = multipleValues ? \"received values of types \".concat(_toConsumableArray(new Set(value.map(function (singleValue) {\n      return \"`\".concat(is(singleValue), \"`\");\n    }))).join(', ')) : \"received value of type `\".concat(is(value), \"`\");\n    throw new TypeError(\"Expected value which is `\".concat(description, \"`, \").concat(valuesMessage, \".\"));\n  }\n};\nexports.assert = {\n  // Unknowns.\n  undefined: function undefined(value) {\n    return assertType(is.undefined(value), 'undefined', value);\n  },\n  string: function string(value) {\n    return assertType(is.string(value), 'string', value);\n  },\n  number: function number(value) {\n    return assertType(is.number(value), 'number', value);\n  },\n  bigint: function bigint(value) {\n    return assertType(is.bigint(value), 'bigint', value);\n  },\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  function_: function function_(value) {\n    return assertType(is.function_(value), 'Function', value);\n  },\n  null_: function null_(value) {\n    return assertType(is.null_(value), 'null', value);\n  },\n  class_: function class_(value) {\n    return assertType(is.class_(value), \"Class\" /* class_ */, value);\n  },\n  boolean: function boolean(value) {\n    return assertType(is.boolean(value), 'boolean', value);\n  },\n  symbol: function symbol(value) {\n    return assertType(is.symbol(value), 'symbol', value);\n  },\n  numericString: function numericString(value) {\n    return assertType(is.numericString(value), \"string with a number\" /* numericString */, value);\n  },\n  array: function array(value, assertion) {\n    var assert = assertType;\n    assert(is.array(value), 'Array', value);\n    if (assertion) {\n      value.forEach(assertion);\n    }\n  },\n  buffer: function buffer(value) {\n    return assertType(is.buffer(value), 'Buffer', value);\n  },\n  blob: function blob(value) {\n    return assertType(is.blob(value), 'Blob', value);\n  },\n  nullOrUndefined: function nullOrUndefined(value) {\n    return assertType(is.nullOrUndefined(value), \"null or undefined\" /* nullOrUndefined */, value);\n  },\n  object: function object(value) {\n    return assertType(is.object(value), 'Object', value);\n  },\n  iterable: function iterable(value) {\n    return assertType(is.iterable(value), \"Iterable\" /* iterable */, value);\n  },\n  asyncIterable: function asyncIterable(value) {\n    return assertType(is.asyncIterable(value), \"AsyncIterable\" /* asyncIterable */, value);\n  },\n  generator: function generator(value) {\n    return assertType(is.generator(value), 'Generator', value);\n  },\n  asyncGenerator: function asyncGenerator(value) {\n    return assertType(is.asyncGenerator(value), 'AsyncGenerator', value);\n  },\n  nativePromise: function nativePromise(value) {\n    return assertType(is.nativePromise(value), \"native Promise\" /* nativePromise */, value);\n  },\n  promise: function promise(value) {\n    return assertType(is.promise(value), 'Promise', value);\n  },\n  generatorFunction: function generatorFunction(value) {\n    return assertType(is.generatorFunction(value), 'GeneratorFunction', value);\n  },\n  asyncGeneratorFunction: function asyncGeneratorFunction(value) {\n    return assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value);\n  },\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  asyncFunction: function asyncFunction(value) {\n    return assertType(is.asyncFunction(value), 'AsyncFunction', value);\n  },\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  boundFunction: function boundFunction(value) {\n    return assertType(is.boundFunction(value), 'Function', value);\n  },\n  regExp: function regExp(value) {\n    return assertType(is.regExp(value), 'RegExp', value);\n  },\n  date: function date(value) {\n    return assertType(is.date(value), 'Date', value);\n  },\n  error: function error(value) {\n    return assertType(is.error(value), 'Error', value);\n  },\n  map: function map(value) {\n    return assertType(is.map(value), 'Map', value);\n  },\n  set: function set(value) {\n    return assertType(is.set(value), 'Set', value);\n  },\n  weakMap: function weakMap(value) {\n    return assertType(is.weakMap(value), 'WeakMap', value);\n  },\n  weakSet: function weakSet(value) {\n    return assertType(is.weakSet(value), 'WeakSet', value);\n  },\n  int8Array: function int8Array(value) {\n    return assertType(is.int8Array(value), 'Int8Array', value);\n  },\n  uint8Array: function uint8Array(value) {\n    return assertType(is.uint8Array(value), 'Uint8Array', value);\n  },\n  uint8ClampedArray: function uint8ClampedArray(value) {\n    return assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value);\n  },\n  int16Array: function int16Array(value) {\n    return assertType(is.int16Array(value), 'Int16Array', value);\n  },\n  uint16Array: function uint16Array(value) {\n    return assertType(is.uint16Array(value), 'Uint16Array', value);\n  },\n  int32Array: function int32Array(value) {\n    return assertType(is.int32Array(value), 'Int32Array', value);\n  },\n  uint32Array: function uint32Array(value) {\n    return assertType(is.uint32Array(value), 'Uint32Array', value);\n  },\n  float32Array: function float32Array(value) {\n    return assertType(is.float32Array(value), 'Float32Array', value);\n  },\n  float64Array: function float64Array(value) {\n    return assertType(is.float64Array(value), 'Float64Array', value);\n  },\n  bigInt64Array: function bigInt64Array(value) {\n    return assertType(is.bigInt64Array(value), 'BigInt64Array', value);\n  },\n  bigUint64Array: function bigUint64Array(value) {\n    return assertType(is.bigUint64Array(value), 'BigUint64Array', value);\n  },\n  arrayBuffer: function arrayBuffer(value) {\n    return assertType(is.arrayBuffer(value), 'ArrayBuffer', value);\n  },\n  sharedArrayBuffer: function sharedArrayBuffer(value) {\n    return assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value);\n  },\n  dataView: function dataView(value) {\n    return assertType(is.dataView(value), 'DataView', value);\n  },\n  enumCase: function enumCase(value, targetEnum) {\n    return assertType(is.enumCase(value, targetEnum), 'EnumCase', value);\n  },\n  urlInstance: function urlInstance(value) {\n    return assertType(is.urlInstance(value), 'URL', value);\n  },\n  urlString: function urlString(value) {\n    return assertType(is.urlString(value), \"string with a URL\" /* urlString */, value);\n  },\n  truthy: function truthy(value) {\n    return assertType(is.truthy(value), \"truthy\" /* truthy */, value);\n  },\n  falsy: function falsy(value) {\n    return assertType(is.falsy(value), \"falsy\" /* falsy */, value);\n  },\n  nan: function nan(value) {\n    return assertType(is.nan(value), \"NaN\" /* nan */, value);\n  },\n  primitive: function primitive(value) {\n    return assertType(is.primitive(value), \"primitive\" /* primitive */, value);\n  },\n  integer: function integer(value) {\n    return assertType(is.integer(value), \"integer\" /* integer */, value);\n  },\n  safeInteger: function safeInteger(value) {\n    return assertType(is.safeInteger(value), \"integer\" /* safeInteger */, value);\n  },\n  plainObject: function plainObject(value) {\n    return assertType(is.plainObject(value), \"plain object\" /* plainObject */, value);\n  },\n  typedArray: function typedArray(value) {\n    return assertType(is.typedArray(value), \"TypedArray\" /* typedArray */, value);\n  },\n  arrayLike: function arrayLike(value) {\n    return assertType(is.arrayLike(value), \"array-like\" /* arrayLike */, value);\n  },\n  domElement: function domElement(value) {\n    return assertType(is.domElement(value), \"HTMLElement\" /* domElement */, value);\n  },\n  observable: function observable(value) {\n    return assertType(is.observable(value), 'Observable', value);\n  },\n  nodeStream: function nodeStream(value) {\n    return assertType(is.nodeStream(value), \"Node.js Stream\" /* nodeStream */, value);\n  },\n  infinite: function infinite(value) {\n    return assertType(is.infinite(value), \"infinite number\" /* infinite */, value);\n  },\n  emptyArray: function emptyArray(value) {\n    return assertType(is.emptyArray(value), \"empty array\" /* emptyArray */, value);\n  },\n  nonEmptyArray: function nonEmptyArray(value) {\n    return assertType(is.nonEmptyArray(value), \"non-empty array\" /* nonEmptyArray */, value);\n  },\n  emptyString: function emptyString(value) {\n    return assertType(is.emptyString(value), \"empty string\" /* emptyString */, value);\n  },\n  emptyStringOrWhitespace: function emptyStringOrWhitespace(value) {\n    return assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* emptyStringOrWhitespace */, value);\n  },\n  nonEmptyString: function nonEmptyString(value) {\n    return assertType(is.nonEmptyString(value), \"non-empty string\" /* nonEmptyString */, value);\n  },\n  nonEmptyStringAndNotWhitespace: function nonEmptyStringAndNotWhitespace(value) {\n    return assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\" /* nonEmptyStringAndNotWhitespace */, value);\n  },\n  emptyObject: function emptyObject(value) {\n    return assertType(is.emptyObject(value), \"empty object\" /* emptyObject */, value);\n  },\n  nonEmptyObject: function nonEmptyObject(value) {\n    return assertType(is.nonEmptyObject(value), \"non-empty object\" /* nonEmptyObject */, value);\n  },\n  emptySet: function emptySet(value) {\n    return assertType(is.emptySet(value), \"empty set\" /* emptySet */, value);\n  },\n  nonEmptySet: function nonEmptySet(value) {\n    return assertType(is.nonEmptySet(value), \"non-empty set\" /* nonEmptySet */, value);\n  },\n  emptyMap: function emptyMap(value) {\n    return assertType(is.emptyMap(value), \"empty map\" /* emptyMap */, value);\n  },\n  nonEmptyMap: function nonEmptyMap(value) {\n    return assertType(is.nonEmptyMap(value), \"non-empty map\" /* nonEmptyMap */, value);\n  },\n  propertyKey: function propertyKey(value) {\n    return assertType(is.propertyKey(value), 'PropertyKey', value);\n  },\n  formData: function formData(value) {\n    return assertType(is.formData(value), 'FormData', value);\n  },\n  urlSearchParams: function urlSearchParams(value) {\n    return assertType(is.urlSearchParams(value), 'URLSearchParams', value);\n  },\n  // Numbers.\n  evenInteger: function evenInteger(value) {\n    return assertType(is.evenInteger(value), \"even integer\" /* evenInteger */, value);\n  },\n  oddInteger: function oddInteger(value) {\n    return assertType(is.oddInteger(value), \"odd integer\" /* oddInteger */, value);\n  },\n  // Two arguments.\n  directInstanceOf: function directInstanceOf(instance, class_) {\n    return assertType(is.directInstanceOf(instance, class_), \"T\" /* directInstanceOf */, instance);\n  },\n  inRange: function inRange(value, range) {\n    return assertType(is.inRange(value, range), \"in range\" /* inRange */, value);\n  },\n  // Variadic functions.\n  any: function any(predicate) {\n    for (var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      values[_key3 - 1] = arguments[_key3];\n    }\n    return assertType(is.any.apply(is, [predicate].concat(values)), \"predicate returns truthy for any value\" /* any */, values, {\n      multipleValues: true\n    });\n  },\n  all: function all(predicate) {\n    for (var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      values[_key4 - 1] = arguments[_key4];\n    }\n    return assertType(is.all.apply(is, [predicate].concat(values)), \"predicate returns truthy for all values\" /* all */, values, {\n      multipleValues: true\n    });\n  }\n};\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n  class: {\n    value: is.class_\n  },\n  function: {\n    value: is.function_\n  },\n  null: {\n    value: is.null_\n  }\n});\nObject.defineProperties(exports.assert, {\n  class: {\n    value: exports.assert.class_\n  },\n  function: {\n    value: exports.assert.function_\n  },\n  null: {\n    value: exports.assert.null_\n  }\n});\nexports.default = is;\n// For CommonJS default export support\nmodule.exports = is;\nmodule.exports.default = is;\nmodule.exports.assert = exports.assert;","map":null,"metadata":{},"sourceType":"script"}