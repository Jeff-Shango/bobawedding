{"ast":null,"code":"var _objectWithoutProperties = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _createClass = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _classCallCheck = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _asyncToGenerator = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _objectSpread = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/* eslint-disable max-classes-per-file */\nvar _require = require('util'),\n  inspect = _require.inspect;\nvar stdhttp = require('http');\nvar crypto = require('crypto');\nvar _require2 = require('assert'),\n  assert = _require2.strict;\nvar querystring = require('querystring');\nvar url = require('url');\nvar _require3 = require('got'),\n  ParseError = _require3.ParseError;\nvar jose = require('jose');\nvar tokenHash = require('oidc-token-hash');\nvar base64url = require('./helpers/base64url');\nvar defaults = require('./helpers/defaults');\nvar _require4 = require('./helpers/assert'),\n  assertSigningAlgValuesSupport = _require4.assertSigningAlgValuesSupport,\n  assertIssuerConfiguration = _require4.assertIssuerConfiguration;\nvar pick = require('./helpers/pick');\nvar isPlainObject = require('./helpers/is_plain_object');\nvar processResponse = require('./helpers/process_response');\nvar TokenSet = require('./token_set');\nvar _require5 = require('./errors'),\n  OPError = _require5.OPError,\n  RPError = _require5.RPError;\nvar now = require('./helpers/unix_timestamp');\nvar _require6 = require('./helpers/generators'),\n  random = _require6.random;\nvar request = require('./helpers/request');\nvar _require7 = require('./helpers/consts'),\n  CALLBACK_PROPERTIES = _require7.CALLBACK_PROPERTIES,\n  CLIENT_DEFAULTS = _require7.CLIENT_DEFAULTS,\n  JWT_CONTENT = _require7.JWT_CONTENT,\n  CLOCK_TOLERANCE = _require7.CLOCK_TOLERANCE;\nvar issuerRegistry = require('./issuer_registry');\nvar instance = require('./helpers/weak_cache');\nvar _require8 = require('./helpers/client'),\n  authenticatedPost = _require8.authenticatedPost,\n  resolveResponseType = _require8.resolveResponseType,\n  resolveRedirectUri = _require8.resolveRedirectUri;\nvar DeviceFlowHandle = require('./device_flow_handle');\nfunction pickCb(input) {\n  return pick.apply(void 0, [input].concat(_toConsumableArray(CALLBACK_PROPERTIES)));\n}\nfunction authorizationHeaderValue(token) {\n  var tokenType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Bearer';\n  return \"\".concat(tokenType, \" \").concat(token);\n}\nfunction cleanUpClaims(claims) {\n  if (Object.keys(claims._claim_names).length === 0) {\n    delete claims._claim_names;\n  }\n  if (Object.keys(claims._claim_sources).length === 0) {\n    delete claims._claim_sources;\n  }\n}\nfunction assignClaim(target, source, sourceName) {\n  var throwOnMissing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      claim = _ref2[0],\n      inSource = _ref2[1];\n    if (inSource === sourceName) {\n      if (throwOnMissing && source[claim] === undefined) {\n        throw new RPError(\"expected claim \\\"\".concat(claim, \"\\\" in \\\"\").concat(sourceName, \"\\\"\"));\n      } else if (source[claim] !== undefined) {\n        target[claim] = source[claim];\n      }\n      delete target._claim_names[claim];\n    }\n  };\n}\nfunction verifyPresence(payload, jwt, prop) {\n  if (payload[prop] === undefined) {\n    throw new RPError({\n      message: \"missing required JWT property \".concat(prop),\n      jwt: jwt\n    });\n  }\n}\nfunction authorizationParams(params) {\n  var authParams = _objectSpread({\n    client_id: this.client_id,\n    scope: 'openid',\n    response_type: resolveResponseType.call(this),\n    redirect_uri: resolveRedirectUri.call(this)\n  }, params);\n  Object.entries(authParams).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      key = _ref4[0],\n      value = _ref4[1];\n    if (value === null || value === undefined) {\n      delete authParams[key];\n    } else if (key === 'claims' && typeof value === 'object') {\n      authParams[key] = JSON.stringify(value);\n    } else if (key === 'resource' && Array.isArray(value)) {\n      authParams[key] = value;\n    } else if (typeof value !== 'string') {\n      authParams[key] = String(value);\n    }\n  });\n  return authParams;\n}\nfunction claimJWT(_x, _x2) {\n  return _claimJWT.apply(this, arguments);\n}\nfunction _claimJWT() {\n  _claimJWT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(label, jwt) {\n    var _jose$JWT$decode2, header, payload, iss, key, discovered;\n    return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n      while (1) switch (_context27.prev = _context27.next) {\n        case 0:\n          _context27.prev = 0;\n          _jose$JWT$decode2 = jose.JWT.decode(jwt, {\n            complete: true\n          }), header = _jose$JWT$decode2.header, payload = _jose$JWT$decode2.payload;\n          iss = payload.iss;\n          if (!(header.alg === 'none')) {\n            _context27.next = 5;\n            break;\n          }\n          return _context27.abrupt(\"return\", payload);\n        case 5:\n          if (!(!iss || iss === this.issuer.issuer)) {\n            _context27.next = 11;\n            break;\n          }\n          _context27.next = 8;\n          return this.issuer.queryKeyStore(header);\n        case 8:\n          key = _context27.sent;\n          _context27.next = 23;\n          break;\n        case 11:\n          if (!issuerRegistry.has(iss)) {\n            _context27.next = 17;\n            break;\n          }\n          _context27.next = 14;\n          return issuerRegistry.get(iss).queryKeyStore(header);\n        case 14:\n          key = _context27.sent;\n          _context27.next = 23;\n          break;\n        case 17:\n          _context27.next = 19;\n          return this.issuer.constructor.discover(iss);\n        case 19:\n          discovered = _context27.sent;\n          _context27.next = 22;\n          return discovered.queryKeyStore(header);\n        case 22:\n          key = _context27.sent;\n        case 23:\n          return _context27.abrupt(\"return\", jose.JWT.verify(jwt, key));\n        case 26:\n          _context27.prev = 26;\n          _context27.t0 = _context27[\"catch\"](0);\n          if (!(_context27.t0 instanceof RPError || _context27.t0 instanceof OPError || _context27.t0.name === 'AggregateError')) {\n            _context27.next = 32;\n            break;\n          }\n          throw _context27.t0;\n        case 32:\n          throw new RPError({\n            printf: ['failed to validate the %s JWT (%s: %s)', label, _context27.t0.name, _context27.t0.message],\n            jwt: jwt\n          });\n        case 33:\n        case \"end\":\n          return _context27.stop();\n      }\n    }, _callee27, this, [[0, 26]]);\n  }));\n  return _claimJWT.apply(this, arguments);\n}\nfunction getKeystore(jwks) {\n  if (!isPlainObject(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some(function (k) {\n    return !isPlainObject(k) || !('kty' in k);\n  })) {\n    throw new TypeError('jwks must be a JSON Web Key Set formatted object');\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  var _iterator = _createForOfIteratorHelper(jwks.keys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var jwk = _step.value;\n      if (jwk.kid === undefined) {\n        jwk.kid = \"DONOTUSE.\".concat(random());\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var keystore = jose.JWKS.asKeyStore(jwks);\n  if (keystore.all().some(function (key) {\n    return key.type !== 'private';\n  })) {\n    throw new TypeError('jwks must only contain private keys');\n  }\n  return keystore;\n}\n\n// if an OP doesnt support client_secret_basic but supports client_secret_post, use it instead\n// this is in place to take care of most common pitfalls when first using discovered Issuers without\n// the support for default values defined by Discovery 1.0\nfunction checkBasicSupport(client, metadata, properties) {\n  try {\n    var supported = client.issuer.token_endpoint_auth_methods_supported;\n    if (!supported.includes(properties.token_endpoint_auth_method)) {\n      if (supported.includes('client_secret_post')) {\n        properties.token_endpoint_auth_method = 'client_secret_post';\n      }\n    }\n  } catch (err) {}\n}\nfunction handleCommonMistakes(client, metadata, properties) {\n  if (!metadata.token_endpoint_auth_method) {\n    // if no explicit value was provided\n    checkBasicSupport(client, metadata, properties);\n  }\n\n  // :fp: c'mon people... RTFM\n  if (metadata.redirect_uri) {\n    if (metadata.redirect_uris) {\n      throw new TypeError('provide a redirect_uri or redirect_uris, not both');\n    }\n    properties.redirect_uris = [metadata.redirect_uri];\n    delete properties.redirect_uri;\n  }\n  if (metadata.response_type) {\n    if (metadata.response_types) {\n      throw new TypeError('provide a response_type or response_types, not both');\n    }\n    properties.response_types = [metadata.response_type];\n    delete properties.response_type;\n  }\n}\nfunction getDefaultsForEndpoint(endpoint, issuer, properties) {\n  if (!issuer[\"\".concat(endpoint, \"_endpoint\")]) return;\n  var tokenEndpointAuthMethod = properties.token_endpoint_auth_method;\n  var tokenEndpointAuthSigningAlg = properties.token_endpoint_auth_signing_alg;\n  var eam = \"\".concat(endpoint, \"_endpoint_auth_method\");\n  var easa = \"\".concat(endpoint, \"_endpoint_auth_signing_alg\");\n  if (properties[eam] === undefined && properties[easa] === undefined) {\n    if (tokenEndpointAuthMethod !== undefined) {\n      properties[eam] = tokenEndpointAuthMethod;\n    }\n    if (tokenEndpointAuthSigningAlg !== undefined) {\n      properties[easa] = tokenEndpointAuthSigningAlg;\n    }\n  }\n}\nvar BaseClient = function BaseClient() {\n  \"use strict\";\n\n  _classCallCheck(this, BaseClient);\n};\nmodule.exports = function (issuer) {\n  var aadIssValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return /*#__PURE__*/function (_BaseClient) {\n    \"use strict\";\n\n    _inherits(Client, _BaseClient);\n    /**\n     * @name constructor\n     * @api public\n     */\n    function Client() {\n      var _this;\n      var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var jwks = arguments.length > 1 ? arguments[1] : undefined;\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      _classCallCheck(this, Client);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Client).call(this));\n      if (typeof metadata.client_id !== 'string' || !metadata.client_id) {\n        throw new TypeError('client_id is required');\n      }\n      var properties = _objectSpread({}, CLIENT_DEFAULTS, metadata);\n      handleCommonMistakes(_assertThisInitialized(_assertThisInitialized(_this)), metadata, properties);\n      assertSigningAlgValuesSupport('token', _this.issuer, properties);\n      ['introspection', 'revocation'].forEach(function (endpoint) {\n        getDefaultsForEndpoint(endpoint, _this.issuer, properties);\n        assertSigningAlgValuesSupport(endpoint, _this.issuer, properties);\n      });\n      Object.entries(properties).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n        instance(_assertThisInitialized(_assertThisInitialized(_this))).get('metadata').set(key, value);\n        if (!_this[key]) {\n          Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), key, {\n            get: function get() {\n              return instance(this).get('metadata').get(key);\n            },\n            enumerable: true\n          });\n        }\n      });\n      if (jwks !== undefined) {\n        var keystore = getKeystore.call(_assertThisInitialized(_assertThisInitialized(_this)), jwks);\n        instance(_assertThisInitialized(_assertThisInitialized(_this))).set('keystore', keystore);\n      }\n      if (options !== undefined) {\n        instance(_assertThisInitialized(_assertThisInitialized(_this))).set('options', options);\n      }\n      _this[CLOCK_TOLERANCE] = 0;\n      return _this;\n    }\n\n    /**\n     * @name authorizationUrl\n     * @api public\n     */\n    _createClass(Client, [{\n      key: \"authorizationUrl\",\n      value: function authorizationUrl() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!isPlainObject(params)) {\n          throw new TypeError('params must be a plain object');\n        }\n        assertIssuerConfiguration(this.issuer, 'authorization_endpoint');\n        var target = url.parse(this.issuer.authorization_endpoint, true);\n        target.search = null;\n        target.query = _objectSpread({}, target.query, authorizationParams.call(this, params));\n        return url.format(target);\n      }\n      /**\n       * @name authorizationPost\n       * @api public\n       */\n    }, {\n      key: \"authorizationPost\",\n      value: function authorizationPost() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!isPlainObject(params)) {\n          throw new TypeError('params must be a plain object');\n        }\n        var inputs = authorizationParams.call(this, params);\n        var formInputs = Object.keys(inputs).map(function (name) {\n          return \"<input type=\\\"hidden\\\" name=\\\"\".concat(name, \"\\\" value=\\\"\").concat(inputs[name], \"\\\"/>\");\n        }).join('\\n');\n        return \"<!DOCTYPE html>\\n<head>\\n  <title>Requesting Authorization</title>\\n</head>\\n<body onload=\\\"javascript:document.forms[0].submit()\\\">\\n  <form method=\\\"post\\\" action=\\\"\".concat(this.issuer.authorization_endpoint, \"\\\">\\n    \").concat(formInputs, \"\\n  </form>\\n</body>\\n</html>\");\n      }\n      /**\n       * @name endSessionUrl\n       * @api public\n       */\n    }, {\n      key: \"endSessionUrl\",\n      value: function endSessionUrl() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        assertIssuerConfiguration(this.issuer, 'end_session_endpoint');\n        var _ref7 = this.post_logout_redirect_uris || [],\n          postLogout = _ref7[0],\n          length = _ref7.length;\n        var _params$post_logout_r = params.post_logout_redirect_uri,\n          post_logout_redirect_uri = _params$post_logout_r === void 0 ? length === 1 ? postLogout : undefined : _params$post_logout_r;\n        var hint = params.id_token_hint;\n        if (hint instanceof TokenSet) {\n          if (!hint.id_token) {\n            throw new TypeError('id_token not present in TokenSet');\n          }\n          hint = hint.id_token;\n        }\n        var target = url.parse(this.issuer.end_session_endpoint, true);\n        target.search = null;\n        target.query = _objectSpread({}, params, target.query, {\n          post_logout_redirect_uri: post_logout_redirect_uri,\n          id_token_hint: hint\n        });\n        Object.entries(target.query).forEach(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n            key = _ref9[0],\n            value = _ref9[1];\n          if (value === null || value === undefined) {\n            delete target.query[key];\n          }\n        });\n        return url.format(target);\n      }\n      /**\n       * @name callbackParams\n       * @api public\n       */\n    }, {\n      key: \"callbackParams\",\n      value: function callbackParams(input) {\n        // eslint-disable-line class-methods-use-this\n        var isIncomingMessage = input instanceof stdhttp.IncomingMessage || input && input.method && input.url;\n        var isString = typeof input === 'string';\n        if (!isString && !isIncomingMessage) {\n          throw new TypeError('#callbackParams only accepts string urls, http.IncomingMessage or a lookalike');\n        }\n        if (isIncomingMessage) {\n          switch (input.method) {\n            case 'GET':\n              return pickCb(url.parse(input.url, true).query);\n            case 'POST':\n              if (input.body === undefined) {\n                throw new TypeError('incoming message body missing, include a body parser prior to this method call');\n              }\n              switch (typeof input.body) {\n                case 'object':\n                case 'string':\n                  if (Buffer.isBuffer(input.body)) {\n                    return pickCb(querystring.parse(input.body.toString('utf-8')));\n                  }\n                  if (typeof input.body === 'string') {\n                    return pickCb(querystring.parse(input.body));\n                  }\n                  return pickCb(input.body);\n                default:\n                  throw new TypeError('invalid IncomingMessage body object');\n              }\n            default:\n              throw new TypeError('invalid IncomingMessage method');\n          }\n        } else {\n          return pickCb(url.parse(input, true).query);\n        }\n      }\n      /**\n       * @name callback\n       * @api public\n       */\n    }, {\n      key: \"callback\",\n      value: function () {\n        var _callback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(redirectUri, parameters) {\n          var checks,\n            _ref10,\n            exchangeBody,\n            clientAssertionPayload,\n            DPoP,\n            params,\n            decrypted,\n            RESPONSE_TYPE_REQUIRED_PARAMS,\n            _iterator2,\n            _step2,\n            type,\n            _iterator3,\n            _step3,\n            param,\n            tokenset,\n            _tokenset,\n            _args = arguments;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                checks = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                _ref10 = _args.length > 3 && _args[3] !== undefined ? _args[3] : {}, exchangeBody = _ref10.exchangeBody, clientAssertionPayload = _ref10.clientAssertionPayload, DPoP = _ref10.DPoP;\n                params = pickCb(parameters);\n                if (!(checks.jarm && !('response' in parameters))) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new RPError({\n                  message: 'expected a JARM response',\n                  checks: checks,\n                  params: params\n                });\n              case 7:\n                if (!('response' in parameters)) {\n                  _context.next = 14;\n                  break;\n                }\n                _context.next = 10;\n                return this.decryptJARM(params.response);\n              case 10:\n                decrypted = _context.sent;\n                _context.next = 13;\n                return this.validateJARM(decrypted);\n              case 13:\n                params = _context.sent;\n              case 14:\n                if (this.default_max_age && !checks.max_age) {\n                  checks.max_age = this.default_max_age;\n                }\n                if (!(params.state && !checks.state)) {\n                  _context.next = 17;\n                  break;\n                }\n                throw new TypeError('checks.state argument is missing');\n              case 17:\n                if (!(!params.state && checks.state)) {\n                  _context.next = 19;\n                  break;\n                }\n                throw new RPError({\n                  message: 'state missing from the response',\n                  checks: checks,\n                  params: params\n                });\n              case 19:\n                if (!(checks.state !== params.state)) {\n                  _context.next = 21;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['state mismatch, expected %s, got: %s', checks.state, params.state],\n                  checks: checks,\n                  params: params\n                });\n              case 21:\n                if (!params.error) {\n                  _context.next = 23;\n                  break;\n                }\n                throw new OPError(params);\n              case 23:\n                RESPONSE_TYPE_REQUIRED_PARAMS = {\n                  code: ['code'],\n                  id_token: ['id_token'],\n                  token: ['access_token', 'token_type']\n                };\n                if (!checks.response_type) {\n                  _context.next = 62;\n                  break;\n                }\n                _iterator2 = _createForOfIteratorHelper(checks.response_type.split(' '));\n                _context.prev = 26;\n                _iterator2.s();\n              case 28:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 54;\n                  break;\n                }\n                type = _step2.value;\n                if (!(type === 'none')) {\n                  _context.next = 35;\n                  break;\n                }\n                if (!(params.code || params.id_token || params.access_token)) {\n                  _context.next = 33;\n                  break;\n                }\n                throw new RPError({\n                  message: 'unexpected params encountered for \"none\" response',\n                  checks: checks,\n                  params: params\n                });\n              case 33:\n                _context.next = 52;\n                break;\n              case 35:\n                _iterator3 = _createForOfIteratorHelper(RESPONSE_TYPE_REQUIRED_PARAMS[type]);\n                _context.prev = 36;\n                _iterator3.s();\n              case 38:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 44;\n                  break;\n                }\n                param = _step3.value;\n                if (params[param]) {\n                  _context.next = 42;\n                  break;\n                }\n                throw new RPError({\n                  message: \"\".concat(param, \" missing from response\"),\n                  checks: checks,\n                  params: params\n                });\n              case 42:\n                _context.next = 38;\n                break;\n              case 44:\n                _context.next = 49;\n                break;\n              case 46:\n                _context.prev = 46;\n                _context.t0 = _context[\"catch\"](36);\n                _iterator3.e(_context.t0);\n              case 49:\n                _context.prev = 49;\n                _iterator3.f();\n                return _context.finish(49);\n              case 52:\n                _context.next = 28;\n                break;\n              case 54:\n                _context.next = 59;\n                break;\n              case 56:\n                _context.prev = 56;\n                _context.t1 = _context[\"catch\"](26);\n                _iterator2.e(_context.t1);\n              case 59:\n                _context.prev = 59;\n                _iterator2.f();\n                return _context.finish(59);\n              case 62:\n                if (!params.id_token) {\n                  _context.next = 70;\n                  break;\n                }\n                tokenset = new TokenSet(params);\n                _context.next = 66;\n                return this.decryptIdToken(tokenset);\n              case 66:\n                _context.next = 68;\n                return this.validateIdToken(tokenset, checks.nonce, 'authorization', checks.max_age, checks.state);\n              case 68:\n                if (params.code) {\n                  _context.next = 70;\n                  break;\n                }\n                return _context.abrupt(\"return\", tokenset);\n              case 70:\n                if (!params.code) {\n                  _context.next = 80;\n                  break;\n                }\n                _context.next = 73;\n                return this.grant(_objectSpread({}, exchangeBody, {\n                  grant_type: 'authorization_code',\n                  code: params.code,\n                  redirect_uri: redirectUri,\n                  code_verifier: checks.code_verifier\n                }), {\n                  clientAssertionPayload: clientAssertionPayload,\n                  DPoP: DPoP\n                });\n              case 73:\n                _tokenset = _context.sent;\n                _context.next = 76;\n                return this.decryptIdToken(_tokenset);\n              case 76:\n                _context.next = 78;\n                return this.validateIdToken(_tokenset, checks.nonce, 'token', checks.max_age);\n              case 78:\n                if (params.session_state) {\n                  _tokenset.session_state = params.session_state;\n                }\n                return _context.abrupt(\"return\", _tokenset);\n              case 80:\n                return _context.abrupt(\"return\", new TokenSet(params));\n              case 81:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this, [[26, 56, 59, 62], [36, 46, 49, 52]]);\n        }));\n        function callback(_x3, _x4) {\n          return _callback.apply(this, arguments);\n        }\n        return callback;\n      }()\n      /**\n       * @name oauthCallback\n       * @api public\n       */\n    }, {\n      key: \"oauthCallback\",\n      value: function () {\n        var _oauthCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(redirectUri, parameters) {\n          var checks,\n            _ref11,\n            exchangeBody,\n            clientAssertionPayload,\n            DPoP,\n            params,\n            decrypted,\n            RESPONSE_TYPE_REQUIRED_PARAMS,\n            _iterator4,\n            _step4,\n            type,\n            _iterator5,\n            _step5,\n            param,\n            _args2 = arguments;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                checks = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                _ref11 = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {}, exchangeBody = _ref11.exchangeBody, clientAssertionPayload = _ref11.clientAssertionPayload, DPoP = _ref11.DPoP;\n                params = pickCb(parameters);\n                if (!(checks.jarm && !('response' in parameters))) {\n                  _context2.next = 7;\n                  break;\n                }\n                throw new RPError({\n                  message: 'expected a JARM response',\n                  checks: checks,\n                  params: params\n                });\n              case 7:\n                if (!('response' in parameters)) {\n                  _context2.next = 14;\n                  break;\n                }\n                _context2.next = 10;\n                return this.decryptJARM(params.response);\n              case 10:\n                decrypted = _context2.sent;\n                _context2.next = 13;\n                return this.validateJARM(decrypted);\n              case 13:\n                params = _context2.sent;\n              case 14:\n                if (!(params.state && !checks.state)) {\n                  _context2.next = 16;\n                  break;\n                }\n                throw new TypeError('checks.state argument is missing');\n              case 16:\n                if (!(!params.state && checks.state)) {\n                  _context2.next = 18;\n                  break;\n                }\n                throw new RPError({\n                  message: 'state missing from the response',\n                  checks: checks,\n                  params: params\n                });\n              case 18:\n                if (!(checks.state !== params.state)) {\n                  _context2.next = 20;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['state mismatch, expected %s, got: %s', checks.state, params.state],\n                  checks: checks,\n                  params: params\n                });\n              case 20:\n                if (!params.error) {\n                  _context2.next = 22;\n                  break;\n                }\n                throw new OPError(params);\n              case 22:\n                RESPONSE_TYPE_REQUIRED_PARAMS = {\n                  code: ['code'],\n                  token: ['access_token', 'token_type']\n                };\n                if (!checks.response_type) {\n                  _context2.next = 60;\n                  break;\n                }\n                _iterator4 = _createForOfIteratorHelper(checks.response_type.split(' '));\n                _context2.prev = 25;\n                _iterator4.s();\n              case 27:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context2.next = 52;\n                  break;\n                }\n                type = _step4.value;\n                if (!(type === 'none')) {\n                  _context2.next = 32;\n                  break;\n                }\n                if (!(params.code || params.id_token || params.access_token)) {\n                  _context2.next = 32;\n                  break;\n                }\n                throw new RPError({\n                  message: 'unexpected params encountered for \"none\" response',\n                  checks: checks,\n                  params: params\n                });\n              case 32:\n                if (!RESPONSE_TYPE_REQUIRED_PARAMS[type]) {\n                  _context2.next = 50;\n                  break;\n                }\n                _iterator5 = _createForOfIteratorHelper(RESPONSE_TYPE_REQUIRED_PARAMS[type]);\n                _context2.prev = 34;\n                _iterator5.s();\n              case 36:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context2.next = 42;\n                  break;\n                }\n                param = _step5.value;\n                if (params[param]) {\n                  _context2.next = 40;\n                  break;\n                }\n                throw new RPError({\n                  message: \"\".concat(param, \" missing from response\"),\n                  checks: checks,\n                  params: params\n                });\n              case 40:\n                _context2.next = 36;\n                break;\n              case 42:\n                _context2.next = 47;\n                break;\n              case 44:\n                _context2.prev = 44;\n                _context2.t0 = _context2[\"catch\"](34);\n                _iterator5.e(_context2.t0);\n              case 47:\n                _context2.prev = 47;\n                _iterator5.f();\n                return _context2.finish(47);\n              case 50:\n                _context2.next = 27;\n                break;\n              case 52:\n                _context2.next = 57;\n                break;\n              case 54:\n                _context2.prev = 54;\n                _context2.t1 = _context2[\"catch\"](25);\n                _iterator4.e(_context2.t1);\n              case 57:\n                _context2.prev = 57;\n                _iterator4.f();\n                return _context2.finish(57);\n              case 60:\n                if (!params.code) {\n                  _context2.next = 62;\n                  break;\n                }\n                return _context2.abrupt(\"return\", this.grant(_objectSpread({}, exchangeBody, {\n                  grant_type: 'authorization_code',\n                  code: params.code,\n                  redirect_uri: redirectUri,\n                  code_verifier: checks.code_verifier\n                }), {\n                  clientAssertionPayload: clientAssertionPayload,\n                  DPoP: DPoP\n                }));\n              case 62:\n                return _context2.abrupt(\"return\", new TokenSet(params));\n              case 63:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this, [[25, 54, 57, 60], [34, 44, 47, 50]]);\n        }));\n        function oauthCallback(_x5, _x6) {\n          return _oauthCallback.apply(this, arguments);\n        }\n        return oauthCallback;\n      }()\n      /**\n       * @name decryptIdToken\n       * @api private\n       */\n    }, {\n      key: \"decryptIdToken\",\n      value: function () {\n        var _decryptIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(token) {\n          var idToken, expectedAlg, expectedEnc, result;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.id_token_encrypted_response_alg) {\n                  _context3.next = 2;\n                  break;\n                }\n                return _context3.abrupt(\"return\", token);\n              case 2:\n                idToken = token;\n                if (!(idToken instanceof TokenSet)) {\n                  _context3.next = 7;\n                  break;\n                }\n                if (idToken.id_token) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new TypeError('id_token not present in TokenSet');\n              case 6:\n                idToken = idToken.id_token;\n              case 7:\n                expectedAlg = this.id_token_encrypted_response_alg;\n                expectedEnc = this.id_token_encrypted_response_enc;\n                _context3.next = 11;\n                return this.decryptJWE(idToken, expectedAlg, expectedEnc);\n              case 11:\n                result = _context3.sent;\n                if (!(token instanceof TokenSet)) {\n                  _context3.next = 15;\n                  break;\n                }\n                token.id_token = result;\n                return _context3.abrupt(\"return\", token);\n              case 15:\n                return _context3.abrupt(\"return\", result);\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this);\n        }));\n        function decryptIdToken(_x7) {\n          return _decryptIdToken.apply(this, arguments);\n        }\n        return decryptIdToken;\n      }()\n    }, {\n      key: \"validateJWTUserinfo\",\n      value: function () {\n        var _validateJWTUserinfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(body) {\n          var expectedAlg;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                expectedAlg = this.userinfo_signed_response_alg;\n                return _context4.abrupt(\"return\", this.validateJWT(body, expectedAlg, []));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4, this);\n        }));\n        function validateJWTUserinfo(_x8) {\n          return _validateJWTUserinfo.apply(this, arguments);\n        }\n        return validateJWTUserinfo;\n      }()\n      /**\n       * @name decryptJARM\n       * @api private\n       */\n    }, {\n      key: \"decryptJARM\",\n      value: function () {\n        var _decryptJARM = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(response) {\n          var expectedAlg, expectedEnc;\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.authorization_encrypted_response_alg) {\n                  _context5.next = 2;\n                  break;\n                }\n                return _context5.abrupt(\"return\", response);\n              case 2:\n                expectedAlg = this.authorization_encrypted_response_alg;\n                expectedEnc = this.authorization_encrypted_response_enc;\n                return _context5.abrupt(\"return\", this.decryptJWE(response, expectedAlg, expectedEnc));\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5, this);\n        }));\n        function decryptJARM(_x9) {\n          return _decryptJARM.apply(this, arguments);\n        }\n        return decryptJARM;\n      }()\n      /**\n       * @name decryptJWTUserinfo\n       * @api private\n       */\n    }, {\n      key: \"decryptJWTUserinfo\",\n      value: function () {\n        var _decryptJWTUserinfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(body) {\n          var expectedAlg, expectedEnc;\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.userinfo_encrypted_response_alg) {\n                  _context6.next = 2;\n                  break;\n                }\n                return _context6.abrupt(\"return\", body);\n              case 2:\n                expectedAlg = this.userinfo_encrypted_response_alg;\n                expectedEnc = this.userinfo_encrypted_response_enc;\n                return _context6.abrupt(\"return\", this.decryptJWE(body, expectedAlg, expectedEnc));\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, _callee6, this);\n        }));\n        function decryptJWTUserinfo(_x10) {\n          return _decryptJWTUserinfo.apply(this, arguments);\n        }\n        return decryptJWTUserinfo;\n      }()\n      /**\n       * @name decryptJWE\n       * @api private\n       */\n    }, {\n      key: \"decryptJWE\",\n      value: function () {\n        var _decryptJWE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(jwe, expectedAlg) {\n          var expectedEnc,\n            header,\n            keyOrStore,\n            payload,\n            _args7 = arguments;\n          return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                expectedEnc = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : 'A128CBC-HS256';\n                header = JSON.parse(base64url.decode(jwe.split('.')[0]));\n                if (!(header.alg !== expectedAlg)) {\n                  _context7.next = 4;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['unexpected JWE alg received, expected %s, got: %s', expectedAlg, header.alg],\n                  jwt: jwe\n                });\n              case 4:\n                if (!(header.enc !== expectedEnc)) {\n                  _context7.next = 6;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['unexpected JWE enc received, expected %s, got: %s', expectedEnc, header.enc],\n                  jwt: jwe\n                });\n              case 6:\n                if (!expectedAlg.match(/^(?:RSA|ECDH)/)) {\n                  _context7.next = 10;\n                  break;\n                }\n                keyOrStore = instance(this).get('keystore');\n                _context7.next = 13;\n                break;\n              case 10:\n                _context7.next = 12;\n                return this.joseSecret(expectedAlg === 'dir' ? expectedEnc : expectedAlg);\n              case 12:\n                keyOrStore = _context7.sent;\n              case 13:\n                payload = jose.JWE.decrypt(jwe, keyOrStore);\n                return _context7.abrupt(\"return\", payload.toString('utf8'));\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }, _callee7, this);\n        }));\n        function decryptJWE(_x11, _x12) {\n          return _decryptJWE.apply(this, arguments);\n        }\n        return decryptJWE;\n      }()\n      /**\n       * @name validateIdToken\n       * @api private\n       */\n    }, {\n      key: \"validateIdToken\",\n      value: function () {\n        var _validateIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tokenSet, nonce, returnedBy, maxAge, state) {\n          var idToken, expectedAlg, isTokenSet, timestamp, _yield$this$validateJ, header, payload, key, fapi;\n          return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                idToken = tokenSet;\n                expectedAlg = this.id_token_signed_response_alg;\n                isTokenSet = idToken instanceof TokenSet;\n                if (!isTokenSet) {\n                  _context8.next = 7;\n                  break;\n                }\n                if (idToken.id_token) {\n                  _context8.next = 6;\n                  break;\n                }\n                throw new TypeError('id_token not present in TokenSet');\n              case 6:\n                idToken = idToken.id_token;\n              case 7:\n                idToken = String(idToken);\n                timestamp = now();\n                _context8.next = 11;\n                return this.validateJWT(idToken, expectedAlg);\n              case 11:\n                _yield$this$validateJ = _context8.sent;\n                header = _yield$this$validateJ.protected;\n                payload = _yield$this$validateJ.payload;\n                key = _yield$this$validateJ.key;\n                if (!(maxAge || maxAge !== null && this.require_auth_time)) {\n                  _context8.next = 20;\n                  break;\n                }\n                if (payload.auth_time) {\n                  _context8.next = 18;\n                  break;\n                }\n                throw new RPError({\n                  message: 'missing required JWT property auth_time',\n                  jwt: idToken\n                });\n              case 18:\n                if (!(typeof payload.auth_time !== 'number')) {\n                  _context8.next = 20;\n                  break;\n                }\n                throw new RPError({\n                  message: 'JWT auth_time claim must be a JSON numeric value',\n                  jwt: idToken\n                });\n              case 20:\n                if (!(maxAge && payload.auth_time + maxAge < timestamp - this[CLOCK_TOLERANCE])) {\n                  _context8.next = 22;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['too much time has elapsed since the last End-User authentication, max_age %i, auth_time: %i, now %i', maxAge, payload.auth_time, timestamp - this[CLOCK_TOLERANCE]],\n                  now: timestamp,\n                  tolerance: this[CLOCK_TOLERANCE],\n                  auth_time: payload.auth_time,\n                  jwt: idToken\n                });\n              case 22:\n                if (!(nonce !== null && (payload.nonce || nonce !== undefined) && payload.nonce !== nonce)) {\n                  _context8.next = 24;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['nonce mismatch, expected %s, got: %s', nonce, payload.nonce],\n                  jwt: idToken\n                });\n              case 24:\n                fapi = this.constructor.name === 'FAPIClient';\n                if (!(returnedBy === 'authorization')) {\n                  _context8.next = 43;\n                  break;\n                }\n                if (!(!payload.at_hash && tokenSet.access_token)) {\n                  _context8.next = 28;\n                  break;\n                }\n                throw new RPError({\n                  message: 'missing required property at_hash',\n                  jwt: idToken\n                });\n              case 28:\n                if (!(!payload.c_hash && tokenSet.code)) {\n                  _context8.next = 30;\n                  break;\n                }\n                throw new RPError({\n                  message: 'missing required property c_hash',\n                  jwt: idToken\n                });\n              case 30:\n                if (!fapi) {\n                  _context8.next = 33;\n                  break;\n                }\n                if (!(!payload.s_hash && (tokenSet.state || state))) {\n                  _context8.next = 33;\n                  break;\n                }\n                throw new RPError({\n                  message: 'missing required property s_hash',\n                  jwt: idToken\n                });\n              case 33:\n                if (!payload.s_hash) {\n                  _context8.next = 43;\n                  break;\n                }\n                if (state) {\n                  _context8.next = 36;\n                  break;\n                }\n                throw new TypeError('cannot verify s_hash, \"checks.state\" property not provided');\n              case 36:\n                _context8.prev = 36;\n                tokenHash.validate({\n                  claim: 's_hash',\n                  source: 'state'\n                }, payload.s_hash, state, header.alg, key && key.crv);\n                _context8.next = 43;\n                break;\n              case 40:\n                _context8.prev = 40;\n                _context8.t0 = _context8[\"catch\"](36);\n                throw new RPError({\n                  message: _context8.t0.message,\n                  jwt: idToken\n                });\n              case 43:\n                if (!(fapi && payload.iat < timestamp - 3600)) {\n                  _context8.next = 45;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['JWT issued too far in the past, now %i, iat %i', timestamp, payload.iat],\n                  now: timestamp,\n                  tolerance: this[CLOCK_TOLERANCE],\n                  iat: payload.iat,\n                  jwt: idToken\n                });\n              case 45:\n                if (!(tokenSet.access_token && payload.at_hash !== undefined)) {\n                  _context8.next = 53;\n                  break;\n                }\n                _context8.prev = 46;\n                tokenHash.validate({\n                  claim: 'at_hash',\n                  source: 'access_token'\n                }, payload.at_hash, tokenSet.access_token, header.alg, key && key.crv);\n                _context8.next = 53;\n                break;\n              case 50:\n                _context8.prev = 50;\n                _context8.t1 = _context8[\"catch\"](46);\n                throw new RPError({\n                  message: _context8.t1.message,\n                  jwt: idToken\n                });\n              case 53:\n                if (!(tokenSet.code && payload.c_hash !== undefined)) {\n                  _context8.next = 61;\n                  break;\n                }\n                _context8.prev = 54;\n                tokenHash.validate({\n                  claim: 'c_hash',\n                  source: 'code'\n                }, payload.c_hash, tokenSet.code, header.alg, key && key.crv);\n                _context8.next = 61;\n                break;\n              case 58:\n                _context8.prev = 58;\n                _context8.t2 = _context8[\"catch\"](54);\n                throw new RPError({\n                  message: _context8.t2.message,\n                  jwt: idToken\n                });\n              case 61:\n                return _context8.abrupt(\"return\", tokenSet);\n              case 62:\n              case \"end\":\n                return _context8.stop();\n            }\n          }, _callee8, this, [[36, 40], [46, 50], [54, 58]]);\n        }));\n        function validateIdToken(_x13, _x14, _x15, _x16, _x17) {\n          return _validateIdToken.apply(this, arguments);\n        }\n        return validateIdToken;\n      }()\n      /**\n       * @name validateJWT\n       * @api private\n       */\n    }, {\n      key: \"validateJWT\",\n      value: function () {\n        var _validateJWT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(jwt, expectedAlg) {\n          var required,\n            isSelfIssued,\n            timestamp,\n            header,\n            payload,\n            _jose$JWT$decode,\n            expectedIss,\n            _ref12,\n            additionalAuthorizedParties,\n            key,\n            _args9 = arguments;\n          return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                required = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : ['iss', 'sub', 'aud', 'exp', 'iat'];\n                isSelfIssued = this.issuer.issuer === 'https://self-issued.me';\n                timestamp = now();\n                _context9.prev = 3;\n                _jose$JWT$decode = jose.JWT.decode(jwt, {\n                  complete: true\n                });\n                header = _jose$JWT$decode.header;\n                payload = _jose$JWT$decode.payload;\n                _context9.next = 12;\n                break;\n              case 9:\n                _context9.prev = 9;\n                _context9.t0 = _context9[\"catch\"](3);\n                throw new RPError({\n                  printf: ['failed to decode JWT (%s: %s)', _context9.t0.name, _context9.t0.message],\n                  jwt: jwt\n                });\n              case 12:\n                if (!(header.alg !== expectedAlg)) {\n                  _context9.next = 14;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['unexpected JWT alg received, expected %s, got: %s', expectedAlg, header.alg],\n                  jwt: jwt\n                });\n              case 14:\n                if (isSelfIssued) {\n                  required = [].concat(_toConsumableArray(required), ['sub_jwk']); // eslint-disable-line no-param-reassign\n                }\n\n                required.forEach(verifyPresence.bind(undefined, payload, jwt));\n                if (!(payload.iss !== undefined)) {\n                  _context9.next = 21;\n                  break;\n                }\n                expectedIss = this.issuer.issuer;\n                if (aadIssValidation) {\n                  expectedIss = this.issuer.issuer.replace('{tenantid}', payload.tid);\n                }\n                if (!(payload.iss !== expectedIss)) {\n                  _context9.next = 21;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['unexpected iss value, expected %s, got: %s', expectedIss, payload.iss],\n                  jwt: jwt\n                });\n              case 21:\n                if (!(payload.iat !== undefined)) {\n                  _context9.next = 24;\n                  break;\n                }\n                if (!(typeof payload.iat !== 'number')) {\n                  _context9.next = 24;\n                  break;\n                }\n                throw new RPError({\n                  message: 'JWT iat claim must be a JSON numeric value',\n                  jwt: jwt\n                });\n              case 24:\n                if (!(payload.nbf !== undefined)) {\n                  _context9.next = 29;\n                  break;\n                }\n                if (!(typeof payload.nbf !== 'number')) {\n                  _context9.next = 27;\n                  break;\n                }\n                throw new RPError({\n                  message: 'JWT nbf claim must be a JSON numeric value',\n                  jwt: jwt\n                });\n              case 27:\n                if (!(payload.nbf > timestamp + this[CLOCK_TOLERANCE])) {\n                  _context9.next = 29;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['JWT not active yet, now %i, nbf %i', timestamp + this[CLOCK_TOLERANCE], payload.nbf],\n                  now: timestamp,\n                  tolerance: this[CLOCK_TOLERANCE],\n                  nbf: payload.nbf,\n                  jwt: jwt\n                });\n              case 29:\n                if (!(payload.exp !== undefined)) {\n                  _context9.next = 34;\n                  break;\n                }\n                if (!(typeof payload.exp !== 'number')) {\n                  _context9.next = 32;\n                  break;\n                }\n                throw new RPError({\n                  message: 'JWT exp claim must be a JSON numeric value',\n                  jwt: jwt\n                });\n              case 32:\n                if (!(timestamp - this[CLOCK_TOLERANCE] >= payload.exp)) {\n                  _context9.next = 34;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['JWT expired, now %i, exp %i', timestamp - this[CLOCK_TOLERANCE], payload.exp],\n                  now: timestamp,\n                  tolerance: this[CLOCK_TOLERANCE],\n                  exp: payload.exp,\n                  jwt: jwt\n                });\n              case 34:\n                if (!(payload.aud !== undefined)) {\n                  _context9.next = 44;\n                  break;\n                }\n                if (!Array.isArray(payload.aud)) {\n                  _context9.next = 42;\n                  break;\n                }\n                if (!(payload.aud.length > 1 && !payload.azp)) {\n                  _context9.next = 38;\n                  break;\n                }\n                throw new RPError({\n                  message: 'missing required JWT property azp',\n                  jwt: jwt\n                });\n              case 38:\n                if (payload.aud.includes(this.client_id)) {\n                  _context9.next = 40;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['aud is missing the client_id, expected %s to be included in %j', this.client_id, payload.aud],\n                  jwt: jwt\n                });\n              case 40:\n                _context9.next = 44;\n                break;\n              case 42:\n                if (!(payload.aud !== this.client_id)) {\n                  _context9.next = 44;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['aud mismatch, expected %s, got: %s', this.client_id, payload.aud],\n                  jwt: jwt\n                });\n              case 44:\n                if (!(payload.azp !== undefined)) {\n                  _context9.next = 49;\n                  break;\n                }\n                _ref12 = instance(this).get('options') || {}, additionalAuthorizedParties = _ref12.additionalAuthorizedParties;\n                if (typeof additionalAuthorizedParties === 'string') {\n                  additionalAuthorizedParties = [this.client_id, additionalAuthorizedParties];\n                } else if (Array.isArray(additionalAuthorizedParties)) {\n                  additionalAuthorizedParties = [this.client_id].concat(_toConsumableArray(additionalAuthorizedParties));\n                } else {\n                  additionalAuthorizedParties = [this.client_id];\n                }\n                if (additionalAuthorizedParties.includes(payload.azp)) {\n                  _context9.next = 49;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['azp mismatch, got: %s', payload.azp],\n                  jwt: jwt\n                });\n              case 49:\n                if (!isSelfIssued) {\n                  _context9.next = 63;\n                  break;\n                }\n                _context9.prev = 50;\n                assert(isPlainObject(payload.sub_jwk));\n                key = jose.JWK.asKey(payload.sub_jwk);\n                assert.equal(key.type, 'public');\n                _context9.next = 59;\n                break;\n              case 56:\n                _context9.prev = 56;\n                _context9.t1 = _context9[\"catch\"](50);\n                throw new RPError({\n                  message: 'failed to use sub_jwk claim as an asymmetric JSON Web Key',\n                  jwt: jwt\n                });\n              case 59:\n                if (!(key.thumbprint !== payload.sub)) {\n                  _context9.next = 61;\n                  break;\n                }\n                throw new RPError({\n                  message: 'failed to match the subject with sub_jwk',\n                  jwt: jwt\n                });\n              case 61:\n                _context9.next = 73;\n                break;\n              case 63:\n                if (!header.alg.startsWith('HS')) {\n                  _context9.next = 69;\n                  break;\n                }\n                _context9.next = 66;\n                return this.joseSecret();\n              case 66:\n                key = _context9.sent;\n                _context9.next = 73;\n                break;\n              case 69:\n                if (!(header.alg !== 'none')) {\n                  _context9.next = 73;\n                  break;\n                }\n                _context9.next = 72;\n                return this.issuer.queryKeyStore(header);\n              case 72:\n                key = _context9.sent;\n              case 73:\n                if (!(!key && header.alg === 'none')) {\n                  _context9.next = 75;\n                  break;\n                }\n                return _context9.abrupt(\"return\", {\n                  protected: header,\n                  payload: payload\n                });\n              case 75:\n                _context9.prev = 75;\n                return _context9.abrupt(\"return\", _objectSpread({}, jose.JWS.verify(jwt, key, {\n                  complete: true\n                }), {\n                  payload: payload\n                }));\n              case 79:\n                _context9.prev = 79;\n                _context9.t2 = _context9[\"catch\"](75);\n                throw new RPError({\n                  message: 'failed to validate JWT signature',\n                  jwt: jwt\n                });\n              case 82:\n              case \"end\":\n                return _context9.stop();\n            }\n          }, _callee9, this, [[3, 9], [50, 56], [75, 79]]);\n        }));\n        function validateJWT(_x18, _x19) {\n          return _validateJWT.apply(this, arguments);\n        }\n        return validateJWT;\n      }()\n      /**\n       * @name refresh\n       * @api public\n       */\n    }, {\n      key: \"refresh\",\n      value: function () {\n        var _refresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(refreshToken) {\n          var _ref13,\n            exchangeBody,\n            clientAssertionPayload,\n            DPoP,\n            token,\n            tokenset,\n            expectedSub,\n            actualSub,\n            _args10 = arguments;\n          return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                _ref13 = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {}, exchangeBody = _ref13.exchangeBody, clientAssertionPayload = _ref13.clientAssertionPayload, DPoP = _ref13.DPoP;\n                token = refreshToken;\n                if (!(token instanceof TokenSet)) {\n                  _context10.next = 6;\n                  break;\n                }\n                if (token.refresh_token) {\n                  _context10.next = 5;\n                  break;\n                }\n                throw new TypeError('refresh_token not present in TokenSet');\n              case 5:\n                token = token.refresh_token;\n              case 6:\n                _context10.next = 8;\n                return this.grant(_objectSpread({}, exchangeBody, {\n                  grant_type: 'refresh_token',\n                  refresh_token: String(token)\n                }), {\n                  clientAssertionPayload: clientAssertionPayload,\n                  DPoP: DPoP\n                });\n              case 8:\n                tokenset = _context10.sent;\n                if (!tokenset.id_token) {\n                  _context10.next = 19;\n                  break;\n                }\n                _context10.next = 12;\n                return this.decryptIdToken(tokenset);\n              case 12:\n                _context10.next = 14;\n                return this.validateIdToken(tokenset, null, 'token', null);\n              case 14:\n                if (!(refreshToken instanceof TokenSet && refreshToken.id_token)) {\n                  _context10.next = 19;\n                  break;\n                }\n                expectedSub = refreshToken.claims().sub;\n                actualSub = tokenset.claims().sub;\n                if (!(actualSub !== expectedSub)) {\n                  _context10.next = 19;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['sub mismatch, expected %s, got: %s', expectedSub, actualSub],\n                  jwt: tokenset.id_token\n                });\n              case 19:\n                return _context10.abrupt(\"return\", tokenset);\n              case 20:\n              case \"end\":\n                return _context10.stop();\n            }\n          }, _callee10, this);\n        }));\n        function refresh(_x20) {\n          return _refresh.apply(this, arguments);\n        }\n        return refresh;\n      }()\n    }, {\n      key: \"requestResource\",\n      value: function () {\n        var _requestResource = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(resourceUrl, accessToken) {\n          var _ref14,\n            method,\n            headers,\n            body,\n            DPoP,\n            _ref14$tokenType,\n            tokenType,\n            requestOpts,\n            mTLS,\n            _args11 = arguments;\n          return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                _ref14 = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {}, method = _ref14.method, headers = _ref14.headers, body = _ref14.body, DPoP = _ref14.DPoP, _ref14$tokenType = _ref14.tokenType, tokenType = _ref14$tokenType === void 0 ? DPoP ? 'DPoP' : accessToken instanceof TokenSet ? accessToken.token_type : 'Bearer' : _ref14$tokenType;\n                if (!(accessToken instanceof TokenSet)) {\n                  _context11.next = 5;\n                  break;\n                }\n                if (accessToken.access_token) {\n                  _context11.next = 4;\n                  break;\n                }\n                throw new TypeError('access_token not present in TokenSet');\n              case 4:\n                accessToken = accessToken.access_token; // eslint-disable-line no-param-reassign\n              case 5:\n                requestOpts = {\n                  headers: _objectSpread({\n                    Authorization: authorizationHeaderValue(accessToken, tokenType)\n                  }, headers),\n                  body: body\n                };\n                mTLS = !!this.tls_client_certificate_bound_access_tokens;\n                return _context11.abrupt(\"return\", request.call(this, _objectSpread({}, requestOpts, {\n                  responseType: 'buffer',\n                  method: method,\n                  url: resourceUrl\n                }), {\n                  accessToken: accessToken,\n                  mTLS: mTLS,\n                  DPoP: DPoP\n                }));\n              case 8:\n              case \"end\":\n                return _context11.stop();\n            }\n          }, _callee11, this);\n        }));\n        function requestResource(_x21, _x22) {\n          return _requestResource.apply(this, arguments);\n        }\n        return requestResource;\n      }()\n      /**\n       * @name userinfo\n       * @api public\n       */\n    }, {\n      key: \"userinfo\",\n      value: function () {\n        var _userinfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(accessToken) {\n          var _ref15,\n            _ref15$method,\n            method,\n            _ref15$via,\n            via,\n            tokenType,\n            params,\n            DPoP,\n            options,\n            jwt,\n            mTLS,\n            targetUrl,\n            response,\n            parsed,\n            body,\n            _userinfo2,\n            _yield$this$validateJ2,\n            expectedSub,\n            _args12 = arguments;\n          return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n            while (1) switch (_context12.prev = _context12.next) {\n              case 0:\n                _ref15 = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {}, _ref15$method = _ref15.method, method = _ref15$method === void 0 ? 'GET' : _ref15$method, _ref15$via = _ref15.via, via = _ref15$via === void 0 ? 'header' : _ref15$via, tokenType = _ref15.tokenType, params = _ref15.params, DPoP = _ref15.DPoP;\n                assertIssuerConfiguration(this.issuer, 'userinfo_endpoint');\n                options = {\n                  tokenType: tokenType,\n                  method: String(method).toUpperCase(),\n                  DPoP: DPoP\n                };\n                if (!(options.method !== 'GET' && options.method !== 'POST')) {\n                  _context12.next = 5;\n                  break;\n                }\n                throw new TypeError('#userinfo() method can only be POST or a GET');\n              case 5:\n                if (!(via === 'query' && options.method !== 'GET')) {\n                  _context12.next = 9;\n                  break;\n                }\n                throw new TypeError('userinfo endpoints will only parse query strings for GET requests');\n              case 9:\n                if (!(via === 'body' && options.method !== 'POST')) {\n                  _context12.next = 11;\n                  break;\n                }\n                throw new TypeError('can only send body on POST');\n              case 11:\n                jwt = !!(this.userinfo_signed_response_alg || this.userinfo_encrypted_response_alg);\n                if (jwt) {\n                  options.headers = {\n                    Accept: 'application/jwt'\n                  };\n                } else {\n                  options.headers = {\n                    Accept: 'application/json'\n                  };\n                }\n                mTLS = !!this.tls_client_certificate_bound_access_tokens;\n                if (mTLS && this.issuer.mtls_endpoint_aliases) {\n                  targetUrl = this.issuer.mtls_endpoint_aliases.userinfo_endpoint;\n                }\n                targetUrl = new url.URL(targetUrl || this.issuer.userinfo_endpoint);\n\n                // when via is not header we clear the Authorization header and add either\n                // query string parameters or urlencoded body access_token parameter\n                if (via === 'query') {\n                  options.headers.Authorization = undefined;\n                  targetUrl.searchParams.append('access_token', accessToken instanceof TokenSet ? accessToken.access_token : accessToken);\n                } else if (via === 'body') {\n                  options.headers.Authorization = undefined;\n                  options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n                  options.body = new url.URLSearchParams();\n                  options.body.append('access_token', accessToken instanceof TokenSet ? accessToken.access_token : accessToken);\n                }\n\n                // handle additional parameters, GET via querystring, POST via urlencoded body\n                if (params) {\n                  if (options.method === 'GET') {\n                    Object.entries(params).forEach(function (_ref16) {\n                      var _ref17 = _slicedToArray(_ref16, 2),\n                        key = _ref17[0],\n                        value = _ref17[1];\n                      targetUrl.searchParams.append(key, value);\n                    });\n                  } else if (options.body) {\n                    // POST && via body\n                    Object.entries(params).forEach(function (_ref18) {\n                      var _ref19 = _slicedToArray(_ref18, 2),\n                        key = _ref19[0],\n                        value = _ref19[1];\n                      options.body.append(key, value);\n                    });\n                  } else {\n                    // POST && via header\n                    options.body = new url.URLSearchParams();\n                    options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n                    Object.entries(params).forEach(function (_ref20) {\n                      var _ref21 = _slicedToArray(_ref20, 2),\n                        key = _ref21[0],\n                        value = _ref21[1];\n                      options.body.append(key, value);\n                    });\n                  }\n                }\n                if (options.body) {\n                  options.body = options.body.toString();\n                }\n                _context12.next = 21;\n                return this.requestResource(targetUrl, accessToken, options);\n              case 21:\n                response = _context12.sent;\n                parsed = processResponse(response, {\n                  bearer: true\n                });\n                if (!jwt) {\n                  _context12.next = 47;\n                  break;\n                }\n                if (JWT_CONTENT.test(response.headers['content-type'])) {\n                  _context12.next = 26;\n                  break;\n                }\n                throw new RPError({\n                  message: 'expected application/jwt response from the userinfo_endpoint',\n                  response: response\n                });\n              case 26:\n                body = response.body.toString();\n                _context12.next = 29;\n                return this.decryptJWTUserinfo(body);\n              case 29:\n                _userinfo2 = _context12.sent;\n                if (this.userinfo_signed_response_alg) {\n                  _context12.next = 41;\n                  break;\n                }\n                _context12.prev = 31;\n                parsed = JSON.parse(_userinfo2);\n                assert(isPlainObject(parsed));\n                _context12.next = 39;\n                break;\n              case 36:\n                _context12.prev = 36;\n                _context12.t0 = _context12[\"catch\"](31);\n                throw new RPError({\n                  message: 'failed to parse userinfo JWE payload as JSON',\n                  jwt: _userinfo2\n                });\n              case 39:\n                _context12.next = 45;\n                break;\n              case 41:\n                _context12.next = 43;\n                return this.validateJWTUserinfo(_userinfo2);\n              case 43:\n                _yield$this$validateJ2 = _context12.sent;\n                parsed = _yield$this$validateJ2.payload;\n              case 45:\n                _context12.next = 54;\n                break;\n              case 47:\n                _context12.prev = 47;\n                parsed = JSON.parse(response.body);\n                _context12.next = 54;\n                break;\n              case 51:\n                _context12.prev = 51;\n                _context12.t1 = _context12[\"catch\"](47);\n                throw new ParseError(_context12.t1, response);\n              case 54:\n                if (!(accessToken instanceof TokenSet && accessToken.id_token)) {\n                  _context12.next = 58;\n                  break;\n                }\n                expectedSub = accessToken.claims().sub;\n                if (!(parsed.sub !== expectedSub)) {\n                  _context12.next = 58;\n                  break;\n                }\n                throw new RPError({\n                  printf: ['userinfo sub mismatch, expected %s, got: %s', expectedSub, parsed.sub],\n                  body: parsed,\n                  jwt: accessToken.id_token\n                });\n              case 58:\n                return _context12.abrupt(\"return\", parsed);\n              case 59:\n              case \"end\":\n                return _context12.stop();\n            }\n          }, _callee12, this, [[31, 36], [47, 51]]);\n        }));\n        function userinfo(_x23) {\n          return _userinfo.apply(this, arguments);\n        }\n        return userinfo;\n      }()\n      /**\n       * @name derivedKey\n       * @api private\n       */\n    }, {\n      key: \"derivedKey\",\n      value: function () {\n        var _derivedKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(len) {\n          var cacheKey, hash, derivedBuffer, key;\n          return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n            while (1) switch (_context13.prev = _context13.next) {\n              case 0:\n                cacheKey = \"\".concat(len, \"_key\");\n                if (!instance(this).has(cacheKey)) {\n                  _context13.next = 3;\n                  break;\n                }\n                return _context13.abrupt(\"return\", instance(this).get(cacheKey));\n              case 3:\n                hash = len <= 256 ? 'sha256' : len <= 384 ? 'sha384' : len <= 512 ? 'sha512' : false; // eslint-disable-line no-nested-ternary\n                if (hash) {\n                  _context13.next = 6;\n                  break;\n                }\n                throw new Error('unsupported symmetric encryption key derivation');\n              case 6:\n                derivedBuffer = crypto.createHash(hash).update(this.client_secret).digest().slice(0, len / 8);\n                key = jose.JWK.asKey({\n                  k: base64url.encode(derivedBuffer),\n                  kty: 'oct'\n                });\n                instance(this).set(cacheKey, key);\n                return _context13.abrupt(\"return\", key);\n              case 10:\n              case \"end\":\n                return _context13.stop();\n            }\n          }, _callee13, this);\n        }));\n        function derivedKey(_x24) {\n          return _derivedKey.apply(this, arguments);\n        }\n        return derivedKey;\n      }()\n      /**\n       * @name joseSecret\n       * @api private\n       */\n    }, {\n      key: \"joseSecret\",\n      value: function () {\n        var _joseSecret = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(alg) {\n          var key;\n          return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n            while (1) switch (_context14.prev = _context14.next) {\n              case 0:\n                if (this.client_secret) {\n                  _context14.next = 2;\n                  break;\n                }\n                throw new TypeError('client_secret is required');\n              case 2:\n                if (!/^A(\\d{3})(?:GCM)?KW$/.test(alg)) {\n                  _context14.next = 4;\n                  break;\n                }\n                return _context14.abrupt(\"return\", this.derivedKey(parseInt(RegExp.$1, 10)));\n              case 4:\n                if (!/^A(\\d{3})(?:GCM|CBC-HS(\\d{3}))$/.test(alg)) {\n                  _context14.next = 6;\n                  break;\n                }\n                return _context14.abrupt(\"return\", this.derivedKey(parseInt(RegExp.$2 || RegExp.$1, 10)));\n              case 6:\n                if (!instance(this).has('jose_secret')) {\n                  _context14.next = 8;\n                  break;\n                }\n                return _context14.abrupt(\"return\", instance(this).get('jose_secret'));\n              case 8:\n                key = jose.JWK.asKey({\n                  k: base64url.encode(this.client_secret),\n                  kty: 'oct'\n                });\n                instance(this).set('jose_secret', key);\n                return _context14.abrupt(\"return\", key);\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }, _callee14, this);\n        }));\n        function joseSecret(_x25) {\n          return _joseSecret.apply(this, arguments);\n        }\n        return joseSecret;\n      }()\n      /**\n       * @name grant\n       * @api public\n       */\n    }, {\n      key: \"grant\",\n      value: function () {\n        var _grant = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(body) {\n          var _ref22,\n            clientAssertionPayload,\n            DPoP,\n            response,\n            responseBody,\n            _args15 = arguments;\n          return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                _ref22 = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {}, clientAssertionPayload = _ref22.clientAssertionPayload, DPoP = _ref22.DPoP;\n                assertIssuerConfiguration(this.issuer, 'token_endpoint');\n                _context15.next = 4;\n                return authenticatedPost.call(this, 'token', {\n                  form: body,\n                  responseType: 'json'\n                }, {\n                  clientAssertionPayload: clientAssertionPayload,\n                  DPoP: DPoP\n                });\n              case 4:\n                response = _context15.sent;\n                responseBody = processResponse(response);\n                return _context15.abrupt(\"return\", new TokenSet(responseBody));\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }, _callee15, this);\n        }));\n        function grant(_x26) {\n          return _grant.apply(this, arguments);\n        }\n        return grant;\n      }()\n      /**\n       * @name deviceAuthorization\n       * @api public\n       */\n    }, {\n      key: \"deviceAuthorization\",\n      value: function () {\n        var _deviceAuthorization = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n          var params,\n            _ref23,\n            exchangeBody,\n            clientAssertionPayload,\n            DPoP,\n            body,\n            response,\n            responseBody,\n            _args16 = arguments;\n          return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n            while (1) switch (_context16.prev = _context16.next) {\n              case 0:\n                params = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};\n                _ref23 = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {}, exchangeBody = _ref23.exchangeBody, clientAssertionPayload = _ref23.clientAssertionPayload, DPoP = _ref23.DPoP;\n                assertIssuerConfiguration(this.issuer, 'device_authorization_endpoint');\n                assertIssuerConfiguration(this.issuer, 'token_endpoint');\n                body = authorizationParams.call(this, _objectSpread({\n                  client_id: this.client_id,\n                  redirect_uri: null,\n                  response_type: null\n                }, params));\n                _context16.next = 7;\n                return authenticatedPost.call(this, 'device_authorization', {\n                  responseType: 'json',\n                  form: body\n                }, {\n                  clientAssertionPayload: clientAssertionPayload,\n                  endpointAuthMethod: 'token'\n                });\n              case 7:\n                response = _context16.sent;\n                responseBody = processResponse(response);\n                return _context16.abrupt(\"return\", new DeviceFlowHandle({\n                  client: this,\n                  exchangeBody: exchangeBody,\n                  clientAssertionPayload: clientAssertionPayload,\n                  response: responseBody,\n                  maxAge: params.max_age,\n                  DPoP: DPoP\n                }));\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }, _callee16, this);\n        }));\n        function deviceAuthorization() {\n          return _deviceAuthorization.apply(this, arguments);\n        }\n        return deviceAuthorization;\n      }()\n      /**\n       * @name revoke\n       * @api public\n       */\n    }, {\n      key: \"revoke\",\n      value: function () {\n        var _revoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(token, hint) {\n          var _ref24,\n            revokeBody,\n            clientAssertionPayload,\n            form,\n            response,\n            _args17 = arguments;\n          return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n            while (1) switch (_context17.prev = _context17.next) {\n              case 0:\n                _ref24 = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {}, revokeBody = _ref24.revokeBody, clientAssertionPayload = _ref24.clientAssertionPayload;\n                assertIssuerConfiguration(this.issuer, 'revocation_endpoint');\n                if (!(hint !== undefined && typeof hint !== 'string')) {\n                  _context17.next = 4;\n                  break;\n                }\n                throw new TypeError('hint must be a string');\n              case 4:\n                form = _objectSpread({}, revokeBody, {\n                  token: token\n                });\n                if (hint) {\n                  form.token_type_hint = hint;\n                }\n                _context17.next = 8;\n                return authenticatedPost.call(this, 'revocation', {\n                  form: form\n                }, {\n                  clientAssertionPayload: clientAssertionPayload\n                });\n              case 8:\n                response = _context17.sent;\n                processResponse(response, {\n                  body: false\n                });\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }, _callee17, this);\n        }));\n        function revoke(_x27, _x28) {\n          return _revoke.apply(this, arguments);\n        }\n        return revoke;\n      }()\n      /**\n       * @name introspect\n       * @api public\n       */\n    }, {\n      key: \"introspect\",\n      value: function () {\n        var _introspect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(token, hint) {\n          var _ref25,\n            introspectBody,\n            clientAssertionPayload,\n            form,\n            response,\n            responseBody,\n            _args18 = arguments;\n          return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n            while (1) switch (_context18.prev = _context18.next) {\n              case 0:\n                _ref25 = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {}, introspectBody = _ref25.introspectBody, clientAssertionPayload = _ref25.clientAssertionPayload;\n                assertIssuerConfiguration(this.issuer, 'introspection_endpoint');\n                if (!(hint !== undefined && typeof hint !== 'string')) {\n                  _context18.next = 4;\n                  break;\n                }\n                throw new TypeError('hint must be a string');\n              case 4:\n                form = _objectSpread({}, introspectBody, {\n                  token: token\n                });\n                if (hint) {\n                  form.token_type_hint = hint;\n                }\n                _context18.next = 8;\n                return authenticatedPost.call(this, 'introspection', {\n                  form: form,\n                  responseType: 'json'\n                }, {\n                  clientAssertionPayload: clientAssertionPayload\n                });\n              case 8:\n                response = _context18.sent;\n                responseBody = processResponse(response);\n                return _context18.abrupt(\"return\", responseBody);\n              case 11:\n              case \"end\":\n                return _context18.stop();\n            }\n          }, _callee18, this);\n        }));\n        function introspect(_x29, _x30) {\n          return _introspect.apply(this, arguments);\n        }\n        return introspect;\n      }()\n      /**\n       * @name fetchDistributedClaims\n       * @api public\n       */\n    }, {\n      key: \"fetchDistributedClaims\",\n      value: function () {\n        var _fetchDistributedClaims = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(claims) {\n          var _this2 = this;\n          var tokens,\n            distributedSources,\n            _args20 = arguments;\n          return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                tokens = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};\n                if (isPlainObject(claims)) {\n                  _context20.next = 3;\n                  break;\n                }\n                throw new TypeError('claims argument must be a plain object');\n              case 3:\n                if (isPlainObject(claims._claim_sources)) {\n                  _context20.next = 5;\n                  break;\n                }\n                return _context20.abrupt(\"return\", claims);\n              case 5:\n                if (isPlainObject(claims._claim_names)) {\n                  _context20.next = 7;\n                  break;\n                }\n                return _context20.abrupt(\"return\", claims);\n              case 7:\n                distributedSources = Object.entries(claims._claim_sources).filter(function (_ref26) {\n                  var _ref27 = _slicedToArray(_ref26, 2),\n                    value = _ref27[1];\n                  return value && value.endpoint;\n                });\n                _context20.next = 10;\n                return Promise.all(distributedSources.map( /*#__PURE__*/function () {\n                  var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(_ref28) {\n                    var _ref30, sourceName, def, requestOpts, response, body, decoded;\n                    return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n                      while (1) switch (_context19.prev = _context19.next) {\n                        case 0:\n                          _ref30 = _slicedToArray(_ref28, 2), sourceName = _ref30[0], def = _ref30[1];\n                          _context19.prev = 1;\n                          requestOpts = {\n                            headers: {\n                              Accept: 'application/jwt',\n                              Authorization: authorizationHeaderValue(def.access_token || tokens[sourceName])\n                            }\n                          };\n                          _context19.next = 5;\n                          return request.call(_this2, _objectSpread({}, requestOpts, {\n                            method: 'GET',\n                            url: def.endpoint\n                          }));\n                        case 5:\n                          response = _context19.sent;\n                          body = processResponse(response, {\n                            bearer: true\n                          });\n                          _context19.next = 9;\n                          return claimJWT.call(_this2, 'distributed', body);\n                        case 9:\n                          decoded = _context19.sent;\n                          delete claims._claim_sources[sourceName];\n                          Object.entries(claims._claim_names).forEach(assignClaim(claims, decoded, sourceName, false));\n                          _context19.next = 18;\n                          break;\n                        case 14:\n                          _context19.prev = 14;\n                          _context19.t0 = _context19[\"catch\"](1);\n                          _context19.t0.src = sourceName;\n                          throw _context19.t0;\n                        case 18:\n                        case \"end\":\n                          return _context19.stop();\n                      }\n                    }, _callee19, null, [[1, 14]]);\n                  }));\n                  return function (_x32) {\n                    return _ref29.apply(this, arguments);\n                  };\n                }()));\n              case 10:\n                cleanUpClaims(claims);\n                return _context20.abrupt(\"return\", claims);\n              case 12:\n              case \"end\":\n                return _context20.stop();\n            }\n          }, _callee20);\n        }));\n        function fetchDistributedClaims(_x31) {\n          return _fetchDistributedClaims.apply(this, arguments);\n        }\n        return fetchDistributedClaims;\n      }()\n      /**\n       * @name unpackAggregatedClaims\n       * @api public\n       */\n    }, {\n      key: \"unpackAggregatedClaims\",\n      value: function () {\n        var _unpackAggregatedClaims = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(claims) {\n          var _this3 = this;\n          var aggregatedSources;\n          return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n            while (1) switch (_context22.prev = _context22.next) {\n              case 0:\n                if (isPlainObject(claims)) {\n                  _context22.next = 2;\n                  break;\n                }\n                throw new TypeError('claims argument must be a plain object');\n              case 2:\n                if (isPlainObject(claims._claim_sources)) {\n                  _context22.next = 4;\n                  break;\n                }\n                return _context22.abrupt(\"return\", claims);\n              case 4:\n                if (isPlainObject(claims._claim_names)) {\n                  _context22.next = 6;\n                  break;\n                }\n                return _context22.abrupt(\"return\", claims);\n              case 6:\n                aggregatedSources = Object.entries(claims._claim_sources).filter(function (_ref31) {\n                  var _ref32 = _slicedToArray(_ref31, 2),\n                    value = _ref32[1];\n                  return value && value.JWT;\n                });\n                _context22.next = 9;\n                return Promise.all(aggregatedSources.map( /*#__PURE__*/function () {\n                  var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_ref33) {\n                    var _ref35, sourceName, def, decoded;\n                    return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n                      while (1) switch (_context21.prev = _context21.next) {\n                        case 0:\n                          _ref35 = _slicedToArray(_ref33, 2), sourceName = _ref35[0], def = _ref35[1];\n                          _context21.prev = 1;\n                          _context21.next = 4;\n                          return claimJWT.call(_this3, 'aggregated', def.JWT);\n                        case 4:\n                          decoded = _context21.sent;\n                          delete claims._claim_sources[sourceName];\n                          Object.entries(claims._claim_names).forEach(assignClaim(claims, decoded, sourceName));\n                          _context21.next = 13;\n                          break;\n                        case 9:\n                          _context21.prev = 9;\n                          _context21.t0 = _context21[\"catch\"](1);\n                          _context21.t0.src = sourceName;\n                          throw _context21.t0;\n                        case 13:\n                        case \"end\":\n                          return _context21.stop();\n                      }\n                    }, _callee21, null, [[1, 9]]);\n                  }));\n                  return function (_x34) {\n                    return _ref34.apply(this, arguments);\n                  };\n                }()));\n              case 9:\n                cleanUpClaims(claims);\n                return _context22.abrupt(\"return\", claims);\n              case 11:\n              case \"end\":\n                return _context22.stop();\n            }\n          }, _callee22);\n        }));\n        function unpackAggregatedClaims(_x33) {\n          return _unpackAggregatedClaims.apply(this, arguments);\n        }\n        return unpackAggregatedClaims;\n      }()\n      /**\n       * @name register\n       * @api public\n       */\n    }, {\n      key: \"requestObject\",\n      /**\n       * @name requestObject\n       * @api public\n       */\n      value: function () {\n        var _requestObject2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          var _requestObject,\n            _ref36,\n            _ref36$sign,\n            signingAlgorithm,\n            _ref36$encrypt,\n            _ref36$encrypt$alg,\n            eKeyManagement,\n            _ref36$encrypt$enc,\n            eContentEncryption,\n            signed,\n            key,\n            fapi,\n            unix,\n            header,\n            payload,\n            symmetric,\n            keystore,\n            fields,\n            _yield$this$issuer$qu,\n            _yield$this$issuer$qu2,\n            _args23 = arguments;\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                _requestObject = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n                _ref36 = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {}, _ref36$sign = _ref36.sign, signingAlgorithm = _ref36$sign === void 0 ? this.request_object_signing_alg || 'none' : _ref36$sign, _ref36$encrypt = _ref36.encrypt;\n                _ref36$encrypt = _ref36$encrypt === void 0 ? {} : _ref36$encrypt;\n                _ref36$encrypt$alg = _ref36$encrypt.alg, eKeyManagement = _ref36$encrypt$alg === void 0 ? this.request_object_encryption_alg : _ref36$encrypt$alg, _ref36$encrypt$enc = _ref36$encrypt.enc, eContentEncryption = _ref36$encrypt$enc === void 0 ? this.request_object_encryption_enc || 'A128CBC-HS256' : _ref36$encrypt$enc;\n                if (isPlainObject(_requestObject)) {\n                  _context23.next = 6;\n                  break;\n                }\n                throw new TypeError('requestObject must be a plain object');\n              case 6:\n                fapi = this.constructor.name === 'FAPIClient';\n                unix = now();\n                header = {\n                  alg: signingAlgorithm,\n                  typ: 'oauth-authz-req+jwt'\n                };\n                payload = JSON.stringify(defaults({}, _requestObject, _objectSpread({\n                  iss: this.client_id,\n                  aud: this.issuer.issuer,\n                  client_id: this.client_id,\n                  jti: random(),\n                  iat: unix,\n                  exp: unix + 300\n                }, fapi ? {\n                  nbf: unix\n                } : undefined)));\n                if (!(signingAlgorithm === 'none')) {\n                  _context23.next = 14;\n                  break;\n                }\n                signed = [base64url.encode(JSON.stringify(header)), base64url.encode(payload), ''].join('.');\n                _context23.next = 28;\n                break;\n              case 14:\n                symmetric = signingAlgorithm.startsWith('HS');\n                if (!symmetric) {\n                  _context23.next = 21;\n                  break;\n                }\n                _context23.next = 18;\n                return this.joseSecret();\n              case 18:\n                key = _context23.sent;\n                _context23.next = 27;\n                break;\n              case 21:\n                keystore = instance(this).get('keystore');\n                if (keystore) {\n                  _context23.next = 24;\n                  break;\n                }\n                throw new TypeError(\"no keystore present for client, cannot sign using alg \".concat(signingAlgorithm));\n              case 24:\n                key = keystore.get({\n                  alg: signingAlgorithm,\n                  use: 'sig'\n                });\n                if (key) {\n                  _context23.next = 27;\n                  break;\n                }\n                throw new TypeError(\"no key to sign with found for alg \".concat(signingAlgorithm));\n              case 27:\n                signed = jose.JWS.sign(payload, key, _objectSpread({}, header, {\n                  kid: symmetric || key.kid.startsWith('DONOTUSE.') ? undefined : key.kid\n                }));\n              case 28:\n                if (eKeyManagement) {\n                  _context23.next = 30;\n                  break;\n                }\n                return _context23.abrupt(\"return\", signed);\n              case 30:\n                fields = {\n                  alg: eKeyManagement,\n                  enc: eContentEncryption,\n                  cty: 'oauth-authz-req+jwt'\n                };\n                if (!fields.alg.match(/^(RSA|ECDH)/)) {\n                  _context23.next = 39;\n                  break;\n                }\n                _context23.next = 34;\n                return this.issuer.queryKeyStore({\n                  alg: fields.alg,\n                  enc: fields.enc,\n                  use: 'enc'\n                }, {\n                  allowMulti: true\n                });\n              case 34:\n                _yield$this$issuer$qu = _context23.sent;\n                _yield$this$issuer$qu2 = _slicedToArray(_yield$this$issuer$qu, 1);\n                key = _yield$this$issuer$qu2[0];\n                _context23.next = 42;\n                break;\n              case 39:\n                _context23.next = 41;\n                return this.joseSecret(fields.alg === 'dir' ? fields.enc : fields.alg);\n              case 41:\n                key = _context23.sent;\n              case 42:\n                return _context23.abrupt(\"return\", jose.JWE.encrypt(signed, key, _objectSpread({}, fields, {\n                  kid: key.kty === 'oct' ? undefined : key.kid\n                })));\n              case 43:\n              case \"end\":\n                return _context23.stop();\n            }\n          }, _callee23, this);\n        }));\n        function requestObject() {\n          return _requestObject2.apply(this, arguments);\n        }\n        return requestObject;\n      }()\n      /**\n       * @name pushedAuthorizationRequest\n       * @api public\n       */\n    }, {\n      key: \"pushedAuthorizationRequest\",\n      value: function () {\n        var _pushedAuthorizationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n          var params,\n            _ref37,\n            clientAssertionPayload,\n            body,\n            response,\n            responseBody,\n            _args24 = arguments;\n          return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n            while (1) switch (_context24.prev = _context24.next) {\n              case 0:\n                params = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};\n                _ref37 = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {}, clientAssertionPayload = _ref37.clientAssertionPayload;\n                assertIssuerConfiguration(this.issuer, 'pushed_authorization_request_endpoint');\n                body = _objectSpread({}, 'request' in params ? params : authorizationParams.call(this, params), {\n                  client_id: this.client_id\n                });\n                _context24.next = 6;\n                return authenticatedPost.call(this, 'pushed_authorization_request', {\n                  responseType: 'json',\n                  form: body\n                }, {\n                  clientAssertionPayload: clientAssertionPayload,\n                  endpointAuthMethod: 'token'\n                });\n              case 6:\n                response = _context24.sent;\n                responseBody = processResponse(response, {\n                  statusCode: 201\n                });\n                if ('expires_in' in responseBody) {\n                  _context24.next = 10;\n                  break;\n                }\n                throw new RPError({\n                  message: 'expected expires_in in Pushed Authorization Successful Response',\n                  response: response\n                });\n              case 10:\n                if (!(typeof responseBody.expires_in !== 'number')) {\n                  _context24.next = 12;\n                  break;\n                }\n                throw new RPError({\n                  message: 'invalid expires_in value in Pushed Authorization Successful Response',\n                  response: response\n                });\n              case 12:\n                if ('request_uri' in responseBody) {\n                  _context24.next = 14;\n                  break;\n                }\n                throw new RPError({\n                  message: 'expected request_uri in Pushed Authorization Successful Response',\n                  response: response\n                });\n              case 14:\n                if (!(typeof responseBody.request_uri !== 'string')) {\n                  _context24.next = 16;\n                  break;\n                }\n                throw new RPError({\n                  message: 'invalid request_uri value in Pushed Authorization Successful Response',\n                  response: response\n                });\n              case 16:\n                return _context24.abrupt(\"return\", responseBody);\n              case 17:\n              case \"end\":\n                return _context24.stop();\n            }\n          }, _callee24, this);\n        }));\n        function pushedAuthorizationRequest() {\n          return _pushedAuthorizationRequest.apply(this, arguments);\n        }\n        return pushedAuthorizationRequest;\n      }()\n      /**\n       * @name issuer\n       * @api public\n       */\n    }, {\n      key: inspect.custom,\n      /* istanbul ignore next */value: function value() {\n        return \"\".concat(this.constructor.name, \" \").concat(inspect(this.metadata, {\n          depth: Infinity,\n          colors: process.stdout.isTTY,\n          compact: false,\n          sorted: true\n        }));\n      }\n    }, {\n      key: \"metadata\",\n      /**\n       * @name metadata\n       * @api public\n       */\n      get: function get() {\n        var copy = {};\n        instance(this).get('metadata').forEach(function (value, key) {\n          copy[key] = value;\n        });\n        return copy;\n      }\n      /**\n       * @name fromUri\n       * @api public\n       */\n    }, {\n      key: \"issuer\",\n      /**\n       * @name issuer\n       * @api public\n       */\n      get: function get() {\n        // eslint-disable-line class-methods-use-this\n        return issuer;\n      }\n    }], [{\n      key: \"register\",\n      value: function () {\n        var _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(metadata) {\n          var options,\n            initialAccessToken,\n            jwks,\n            clientOptions,\n            keystore,\n            _iterator6,\n            _step6,\n            jwk,\n            response,\n            responseBody,\n            _args25 = arguments;\n          return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n            while (1) switch (_context25.prev = _context25.next) {\n              case 0:\n                options = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : {};\n                initialAccessToken = options.initialAccessToken, jwks = options.jwks, clientOptions = _objectWithoutProperties(options, [\"initialAccessToken\", \"jwks\"]);\n                assertIssuerConfiguration(this.issuer, 'registration_endpoint');\n                if (jwks !== undefined && !(metadata.jwks || metadata.jwks_uri)) {\n                  keystore = getKeystore.call(this, jwks);\n                  metadata.jwks = keystore.toJWKS(false);\n                  // eslint-disable-next-line no-restricted-syntax\n                  _iterator6 = _createForOfIteratorHelper(metadata.jwks.keys);\n                  try {\n                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                      jwk = _step6.value;\n                      if (jwk.kid.startsWith('DONOTUSE.')) {\n                        delete jwk.kid;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator6.e(err);\n                  } finally {\n                    _iterator6.f();\n                  }\n                }\n                _context25.next = 6;\n                return request.call(this, {\n                  headers: initialAccessToken ? {\n                    Authorization: authorizationHeaderValue(initialAccessToken)\n                  } : undefined,\n                  responseType: 'json',\n                  json: metadata,\n                  url: this.issuer.registration_endpoint,\n                  method: 'POST'\n                });\n              case 6:\n                response = _context25.sent;\n                responseBody = processResponse(response, {\n                  statusCode: 201,\n                  bearer: true\n                });\n                return _context25.abrupt(\"return\", new this(responseBody, jwks, clientOptions));\n              case 9:\n              case \"end\":\n                return _context25.stop();\n            }\n          }, _callee25, this);\n        }));\n        function register(_x35) {\n          return _register.apply(this, arguments);\n        }\n        return register;\n      }()\n    }, {\n      key: \"fromUri\",\n      value: function () {\n        var _fromUri = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(registrationClientUri, registrationAccessToken, jwks, clientOptions) {\n          var response, responseBody;\n          return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n            while (1) switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return request.call(this, {\n                  method: 'GET',\n                  url: registrationClientUri,\n                  responseType: 'json',\n                  headers: {\n                    Authorization: authorizationHeaderValue(registrationAccessToken)\n                  }\n                });\n              case 2:\n                response = _context26.sent;\n                responseBody = processResponse(response, {\n                  bearer: true\n                });\n                return _context26.abrupt(\"return\", new this(responseBody, jwks, clientOptions));\n              case 5:\n              case \"end\":\n                return _context26.stop();\n            }\n          }, _callee26, this);\n        }));\n        function fromUri(_x36, _x37, _x38, _x39) {\n          return _fromUri.apply(this, arguments);\n        }\n        return fromUri;\n      }()\n    }, {\n      key: \"issuer\",\n      get: function get() {\n        return issuer;\n      }\n    }]);\n    return Client;\n  }(BaseClient);\n};\n\n/**\n * @name validateJARM\n * @api private\n */\nfunction validateJARM(_x40) {\n  return _validateJARM.apply(this, arguments);\n}\nfunction _validateJARM() {\n  _validateJARM = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(response) {\n    var expectedAlg, _yield$this$validateJ3, payload;\n    return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n      while (1) switch (_context28.prev = _context28.next) {\n        case 0:\n          expectedAlg = this.authorization_signed_response_alg;\n          _context28.next = 3;\n          return this.validateJWT(response, expectedAlg, ['iss', 'exp', 'aud']);\n        case 3:\n          _yield$this$validateJ3 = _context28.sent;\n          payload = _yield$this$validateJ3.payload;\n          return _context28.abrupt(\"return\", pickCb(payload));\n        case 6:\n        case \"end\":\n          return _context28.stop();\n      }\n    }, _callee28, this);\n  }));\n  return _validateJARM.apply(this, arguments);\n}\nObject.defineProperty(BaseClient.prototype, 'validateJARM', {\n  enumerable: true,\n  configurable: true,\n  value: function value() {\n    process.emitWarning(\"The JARM API implements an OIDF implementer's draft. Breaking draft implementations are included as minor versions of the openid-client library, therefore, the ~ semver operator should be used and close attention be payed to library changelog as well as the drafts themselves.\", 'DraftWarning');\n    Object.defineProperty(BaseClient.prototype, 'validateJARM', {\n      enumerable: true,\n      configurable: true,\n      value: validateJARM\n    });\n    return this.validateJARM.apply(this, arguments);\n  }\n});\n\n/**\n * @name dpopProof\n * @api private\n */\nfunction dpopProof(payload, jwk, accessToken) {\n  if (!isPlainObject(payload)) {\n    throw new TypeError('payload must be a plain object');\n  }\n  var key;\n  try {\n    key = jose.JWK.asKey(jwk);\n    assert(key.type === 'private');\n  } catch (err) {\n    throw new TypeError('\"DPoP\" option must be an asymmetric private key to sign the DPoP Proof JWT with');\n  }\n  var _key = key,\n    alg = _key.alg;\n  if (!alg && this.issuer.dpop_signing_alg_values_supported) {\n    var algs = key.algorithms('sign');\n    alg = this.issuer.dpop_signing_alg_values_supported.find(function (a) {\n      return algs.has(a);\n    });\n  }\n  if (!alg) {\n    var _key$algorithms = key.algorithms('sign');\n    var _key$algorithms2 = _slicedToArray(_key$algorithms, 1);\n    alg = _key$algorithms2[0];\n  }\n  return jose.JWS.sign(_objectSpread({\n    iat: now(),\n    jti: random(),\n    ath: accessToken ? base64url.encode(crypto.createHash('sha256').update(accessToken).digest()) : undefined\n  }, payload), jwk, {\n    alg: alg,\n    typ: 'dpop+jwt',\n    jwk: pick(key, 'kty', 'crv', 'x', 'y', 'e', 'n')\n  });\n}\nObject.defineProperty(BaseClient.prototype, 'dpopProof', {\n  enumerable: true,\n  configurable: true,\n  value: function value() {\n    process.emitWarning('The DPoP APIs implements an IETF draft (https://www.ietf.org/archive/id/draft-ietf-oauth-dpop-03.html). Breaking draft implementations are included as minor versions of the openid-client library, therefore, the ~ semver operator should be used and close attention be payed to library changelog as well as the drafts themselves.', 'DraftWarning');\n    Object.defineProperty(BaseClient.prototype, 'dpopProof', {\n      enumerable: true,\n      configurable: true,\n      value: dpopProof\n    });\n    return this.dpopProof.apply(this, arguments);\n  }\n});\nmodule.exports.BaseClient = BaseClient;","map":null,"metadata":{},"sourceType":"script"}