{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nvar util_1 = require(\"util\");\nvar bson_1 = require(\"./bson\");\nvar metrics_1 = require(\"./cmap/metrics\");\nvar shared_1 = require(\"./cmap/wire_protocol/shared\");\nvar constants_1 = require(\"./constants\");\nvar error_1 = require(\"./error\");\nvar mongo_types_1 = require(\"./mongo_types\");\nvar execute_operation_1 = require(\"./operations/execute_operation\");\nvar run_command_1 = require(\"./operations/run_command\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar common_1 = require(\"./sdam/common\");\nvar transactions_1 = require(\"./transactions\");\nvar utils_1 = require(\"./utils\");\nvar write_concern_1 = require(\"./write_concern\");\nvar minWireVersionForShardedTransactions = 8;\n/** @internal */\nvar kServerSession = Symbol('serverSession');\n/** @internal */\nvar kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nvar kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nvar kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nvar kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nvar ClientSession = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(ClientSession, _mongo_types_1$TypedE);\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  function ClientSession(client, sessionPool, options, clientOptions) {\n    var _this;\n    _classCallCheck(this, ClientSession);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClientSession).call(this));\n    /** @internal */\n    _this[_a] = false;\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n    options = options ?? {};\n    if (options.snapshot === true) {\n      _this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n    _this.client = client;\n    _this.sessionPool = sessionPool;\n    _this.hasEnded = false;\n    _this.clientOptions = clientOptions;\n    _this.explicit = !!options.explicit;\n    _this[kServerSession] = _this.explicit ? _this.sessionPool.acquire() : null;\n    _this[kTxnNumberIncrement] = 0;\n    var defaultCausalConsistencyValue = _this.explicit && options.snapshot !== true;\n    _this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n    };\n    _this.clusterTime = options.initialClusterTime;\n    _this.operationTime = undefined;\n    _this.owner = options.owner;\n    _this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    _this.transaction = new transactions_1.Transaction();\n    return _this;\n  }\n  /** The server id associated with this session */\n  _createClass(ClientSession, [{\n    key: \"pin\",\n    /** @internal */value: function pin(conn) {\n      if (this[kPinnedConnection]) {\n        throw TypeError('Cannot pin multiple connections to the same session');\n      }\n      this[kPinnedConnection] = conn;\n      conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    } /** @internal */\n  }, {\n    key: \"unpin\",\n    value: function unpin(options) {\n      if (this.loadBalanced) {\n        return maybeClearPinnedConnection(this, options);\n      }\n      this.transaction.unpinServer();\n    }\n  }, {\n    key: \"endSession\",\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    value: function () {\n      var _endSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var serverSession;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              if (!this.inTransaction()) {\n                _context.next = 4;\n                break;\n              }\n              _context.next = 4;\n              return this.abortTransaction();\n            case 4:\n              if (!this.hasEnded) {\n                serverSession = this[kServerSession];\n                if (serverSession != null) {\n                  // release the server session back to the pool\n                  this.sessionPool.release(serverSession);\n                  // Make sure a new serverSession never makes it onto this ClientSession\n                  Object.defineProperty(this, kServerSession, {\n                    value: ServerSession.clone(serverSession),\n                    writable: false\n                  });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n              }\n              _context.next = 9;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n            case 9:\n              _context.prev = 9;\n              maybeClearPinnedConnection(this, _objectSpread({\n                force: true\n              }, options));\n              return _context.finish(9);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 7, 9, 12]]);\n      }));\n      function endSession(_x) {\n        return _endSession.apply(this, arguments);\n      }\n      return endSession;\n    }()\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n  }, {\n    key: \"advanceOperationTime\",\n    value: function advanceOperationTime(operationTime) {\n      if (this.operationTime == null) {\n        this.operationTime = operationTime;\n        return;\n      }\n      if (operationTime.greaterThan(this.operationTime)) {\n        this.operationTime = operationTime;\n      }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n  }, {\n    key: \"advanceClusterTime\",\n    value: function advanceClusterTime(clusterTime) {\n      if (!clusterTime || typeof clusterTime !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n      }\n      if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n        throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n      }\n      if (!clusterTime.signature || clusterTime.signature.hash?._bsontype !== 'Binary' || typeof clusterTime.signature.keyId !== 'bigint' && typeof clusterTime.signature.keyId !== 'number' && clusterTime.signature.keyId?._bsontype !== 'Long' // apparently we decode the key to number?\n      ) {\n        throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n      }\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(session) {\n      if (!(session instanceof ClientSession)) {\n        return false;\n      }\n      if (this.id == null || session.id == null) {\n        return false;\n      }\n      return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n  }, {\n    key: \"incrementTransactionNumber\",\n    value: function incrementTransactionNumber() {\n      this[kTxnNumberIncrement] += 1;\n    } /** @returns whether this session is currently in a transaction or not */\n  }, {\n    key: \"inTransaction\",\n    value: function inTransaction() {\n      return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(options) {\n      if (this[kSnapshotEnabled]) {\n        throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n      }\n      if (this.inTransaction()) {\n        throw new error_1.MongoTransactionError('Transaction already in progress');\n      }\n      if (this.isPinned && this.transaction.isCommitted) {\n        this.unpin();\n      }\n      var topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n      if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n        throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n      }\n      // increment txnNumber\n      this.incrementTransactionNumber();\n      // create transaction state\n      this.transaction = new transactions_1.Transaction({\n        readConcern: options?.readConcern ?? this.defaultTransactionOptions.readConcern ?? this.clientOptions?.readConcern,\n        writeConcern: options?.writeConcern ?? this.defaultTransactionOptions.writeConcern ?? this.clientOptions?.writeConcern,\n        readPreference: options?.readPreference ?? this.defaultTransactionOptions.readPreference ?? this.clientOptions?.readPreference,\n        maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n      });\n      this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */\n  }, {\n    key: \"commitTransaction\",\n    value: function () {\n      var _commitTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", endTransactionAsync(this, 'commitTransaction'));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function commitTransaction() {\n        return _commitTransaction.apply(this, arguments);\n      }\n      return commitTransaction;\n    }()\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n  }, {\n    key: \"abortTransaction\",\n    value: function () {\n      var _abortTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", endTransactionAsync(this, 'abortTransaction'));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function abortTransaction() {\n        return _abortTransaction.apply(this, arguments);\n      }\n      return abortTransaction;\n    }()\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n  }, {\n    key: \"toBSON\",\n    value: function toBSON() {\n      throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n  }, {\n    key: \"withTransaction\",\n    value: function () {\n      var _withTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(fn, options) {\n        var startTime;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              startTime = (0, utils_1.now)();\n              return _context4.abrupt(\"return\", attemptTransaction(this, startTime, fn, options));\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function withTransaction(_x2, _x3) {\n        return _withTransaction.apply(this, arguments);\n      }\n      return withTransaction;\n    }()\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this[kServerSession]?.id;\n    }\n  }, {\n    key: \"serverSession\",\n    get: function get() {\n      var serverSession = this[kServerSession];\n      if (serverSession == null) {\n        if (this.explicit) {\n          throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n        }\n        if (this.hasEnded) {\n          throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n        }\n        serverSession = this.sessionPool.acquire();\n        this[kServerSession] = serverSession;\n      }\n      return serverSession;\n    } /** Whether or not this session is configured for snapshot reads */\n  }, {\n    key: \"snapshotEnabled\",\n    get: function get() {\n      return this[kSnapshotEnabled];\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    } /** @internal */\n  }, {\n    key: \"pinnedConnection\",\n    get: function get() {\n      return this[kPinnedConnection];\n    }\n  }, {\n    key: \"isPinned\",\n    get: function get() {\n      return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n  }]);\n  return ClientSession;\n}(mongo_types_1.TypedEventEmitter);\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nvar MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nvar NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n  var isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  var conn = session[kPinnedConnection];\n  var error = options?.error;\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  }\n  var topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    var servers = Array.from(topology.s.servers.values());\n    var loadBalancer = servers[0];\n    if (options?.error == null || options?.force) {\n      loadBalancer.pool.checkIn(conn);\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n      if (options?.forceClear) {\n        loadBalancer.pool.clear({\n          serviceId: conn.serviceId\n        });\n      }\n    }\n    session[kPinnedConnection] = undefined;\n  }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n  return session.commitTransaction().then(function () {\n    return result;\n  }, function (err) {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n      }\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n    throw err;\n  });\n}\nvar USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  session.startTransaction(options);\n  var promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction().catch(function () {\n      return null;\n    });\n    return Promise.reject(new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise'));\n  }\n  return promise.then(function (result) {\n    if (userExplicitlyEndedTransaction(session)) {\n      return result;\n    }\n    return attemptTransactionCommit(session, startTime, fn, result, options);\n  }, function (err) {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n      throw err;\n    }\n    if (session.inTransaction()) {\n      return session.abortTransaction().then(function () {\n        return maybeRetryOrThrow(err);\n      });\n    }\n    return maybeRetryOrThrow(err);\n  });\n}\nvar endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n  // handle any initial problematic cases\n  var txnState = session.transaction.state;\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n  // construct and send the command\n  var command = _defineProperty({}, commandName, 1);\n  // apply a writeConcern if specified\n  var writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeoutMS: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n  if (writeConcern) {\n    write_concern_1.WriteConcern.apply(command, writeConcern);\n  }\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n  function commandHandler(error) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      }\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof error_1.MongoError) {\n      if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n          // per txns spec, must unpin session in this case\n          session.unpin({\n            error: error\n          });\n        }\n      } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({\n          error: error\n        });\n      }\n    }\n    callback(error);\n  }\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n  // send the command\n  (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n    session: session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), function (error) {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n    if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n      return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session: session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), commandHandler);\n    }\n    commandHandler(error);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nvar ServerSession = /*#__PURE__*/function () {\n  /** @internal */\n  function ServerSession() {\n    _classCallCheck(this, ServerSession);\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  _createClass(ServerSession, [{\n    key: \"hasTimedOut\",\n    value: function hasTimedOut(sessionTimeoutMinutes) {\n      // Take the difference of the lastUse timestamp and now, which will result in a value in\n      // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n      var idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n      return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n  }], [{\n    key: \"clone\",\n    value: function clone(serverSession) {\n      var arrayBuffer = new ArrayBuffer(16);\n      var idBytes = Buffer.from(arrayBuffer);\n      idBytes.set(serverSession.id.id.buffer);\n      var id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n      // Manual prototype construction to avoid modifying the constructor of this class\n      return Object.setPrototypeOf({\n        id: {\n          id: id\n        },\n        lastUse: serverSession.lastUse,\n        txnNumber: serverSession.txnNumber,\n        isDirty: serverSession.isDirty\n      }, ServerSession.prototype);\n    }\n  }]);\n  return ServerSession;\n}();\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nvar ServerSessionPool = /*#__PURE__*/function () {\n  function ServerSessionPool(client) {\n    _classCallCheck(this, ServerSessionPool);\n    if (client == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n    this.client = client;\n    this.sessions = new utils_1.List();\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  _createClass(ServerSessionPool, [{\n    key: \"acquire\",\n    value: function acquire() {\n      var sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n      var session = null;\n      // Try to obtain from session pool\n      while (this.sessions.length > 0) {\n        var potentialSession = this.sessions.shift();\n        if (potentialSession != null && (!!this.client.topology?.loadBalanced || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n          session = potentialSession;\n          break;\n        }\n      }\n      // If nothing valid came from the pool make a new one\n      if (session == null) {\n        session = new ServerSession();\n      }\n      return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n  }, {\n    key: \"release\",\n    value: function release(session) {\n      var sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n      if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n        this.sessions.unshift(session);\n      }\n      if (!sessionTimeoutMinutes) {\n        return;\n      }\n      this.sessions.prune(function (session) {\n        return session.hasTimedOut(sessionTimeoutMinutes);\n      });\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        if (session.isDirty) {\n          return;\n        }\n        // otherwise, readd this session to the session pool\n        this.sessions.unshift(session);\n      }\n    }\n  }]);\n  return ServerSessionPool;\n}();\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  }\n  // May acquire serverSession here\n  var serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  var inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  var isRetryableWrite = !!options.willRetryWrite;\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n    return;\n  }\n  // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    var readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n  return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    var atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"names":["util_1","require","bson_1","metrics_1","shared_1","constants_1","error_1","mongo_types_1","execute_operation_1","run_command_1","read_concern_1","read_preference_1","common_1","transactions_1","utils_1","write_concern_1","minWireVersionForShardedTransactions","kServerSession","Symbol","kSnapshotTime","kSnapshotEnabled","kPinnedConnection","kTxnNumberIncrement","ClientSession","_mongo_types_1$TypedE","_inherits","client","sessionPool","options","clientOptions","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_a","MongoRuntimeError","ServerSessionPool","snapshot","causalConsistency","MongoInvalidArgumentError","hasEnded","explicit","acquire","defaultCausalConsistencyValue","supports","clusterTime","initialClusterTime","operationTime","undefined","owner","defaultTransactionOptions","Object","assign","transaction","Transaction","_createClass","key","value","pin","conn","TypeError","emit","PINNED","inTransaction","ConnectionPoolMetrics","TXN","CURSOR","unpin","loadBalanced","maybeClearPinnedConnection","unpinServer","_endSession","_asyncToGenerator","_regeneratorRuntime","mark","_callee","serverSession","wrap","_callee$","_context","prev","next","abortTransaction","release","defineProperty","ServerSession","clone","writable","t0","_objectSpread","force","finish","stop","endSession","_x","apply","arguments","advanceOperationTime","greaterThan","advanceClusterTime","_bsontype","signature","hash","keyId","_advanceClusterTime","equals","session","id","ByteUtils","buffer","incrementTransactionNumber","isActive","startTransaction","MongoCompatibilityError","MongoTransactionError","isPinned","isCommitted","topologyMaxWireVersion","maxWireVersion","topology","isSharded","readConcern","writeConcern","readPreference","maxCommitTimeMS","transition","TxnState","STARTING_TRANSACTION","_commitTransaction","_callee2","_callee2$","_context2","abrupt","endTransactionAsync","commitTransaction","_abortTransaction","_callee3","_callee3$","_context3","toBSON","_withTransaction","_callee4","fn","startTime","_callee4$","_context4","now","attemptTransaction","withTransaction","_x2","_x3","get","description","type","TopologyType","LoadBalanced","TypedEventEmitter","exports","MAX_WITH_TRANSACTION_TIMEOUT","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","calculateDurationInMs","isUnknownTransactionCommitResult","err","isNonDeterministicWriteConcernError","MongoServerError","codeName","has","isMaxTimeMSExpiredError","code","MONGODB_ERROR_CODES","UnsatisfiableWriteConcern","UnknownReplWriteConcern","error","MongoError","hasErrorLabel","MongoErrorLabel","TransientTransactionError","servers","Array","from","s","values","loadBalancer","pool","checkIn","UNPINNED","state","NO_TRANSACTION","forceClear","clear","serviceId","MaxTimeMSExpired","writeConcernError","attemptTransactionCommit","result","then","UnknownTransactionCommitResult","USER_EXPLICIT_TXN_END_STATES","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","length","promise","Promise","reject","isPromiseLike","catch","maybeRetryOrThrow","addErrorLabel","promisify","endTransaction","commandName","callback","txnState","TRANSACTION_COMMITTED_EMPTY","command","_defineProperty","w","wtimeoutMS","WriteConcern","maxTimeMS","commandHandler","RetryableWriteError","MongoWriteConcernError","recoveryToken","executeOperation","RunAdminCommandOperation","ReadPreference","primary","bypassPinningCheck","wtimeout","Binary","uuidV4","SUBTYPE_UUID","lastUse","txnNumber","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","arrayBuffer","ArrayBuffer","idBytes","Buffer","set","sub_type","setPrototypeOf","prototype","sessions","List","logicalSessionTimeoutMinutes","potentialSession","shift","unshift","prune","applySession","MongoExpiredSessionError","MongoAPIError","lsid","inTxnOrTxnCommand","isTransactionCommand","isRetryableWrite","willRetryWrite","Long","fromNumber","commandSupportsReadConcern","afterClusterTime","level","ReadConcernLevel","atClusterTime","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","cursor"],"sources":["../src/sessions.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}