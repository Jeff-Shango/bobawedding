{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnorderedBulkOperation = void 0;\nvar BSON = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar common_1 = require(\"./common\");\n/** @public */\nvar UnorderedBulkOperation = /*#__PURE__*/function (_common_1$BulkOperati) {\n  _inherits(UnorderedBulkOperation, _common_1$BulkOperati);\n  /** @internal */\n  function UnorderedBulkOperation(collection, options) {\n    _classCallCheck(this, UnorderedBulkOperation);\n    return _possibleConstructorReturn(this, _getPrototypeOf(UnorderedBulkOperation).call(this, collection, options, false));\n  }\n  _createClass(UnorderedBulkOperation, [{\n    key: \"handleWriteError\",\n    value: function handleWriteError(callback, writeResult) {\n      if (this.s.batches.length) {\n        return false;\n      }\n      return _get(_getPrototypeOf(UnorderedBulkOperation.prototype), \"handleWriteError\", this).call(this, callback, writeResult);\n    }\n  }, {\n    key: \"addToOperationsList\",\n    value: function addToOperationsList(batchType, document) {\n      // Get the bsonSize\n      var bsonSize = BSON.calculateObjectSize(document, {\n        checkKeys: false,\n        // Since we don't know what the user selected for BSON options here,\n        // err on the safe side, and check the size with ignoreUndefined: false.\n        ignoreUndefined: false\n      });\n      // Throw error if the doc is bigger than the max BSON size\n      if (bsonSize >= this.s.maxBsonObjectSize) {\n        // TODO(NODE-3483): Change this to MongoBSONError\n        throw new error_1.MongoInvalidArgumentError(\"Document is larger than the maximum size \".concat(this.s.maxBsonObjectSize));\n      }\n      // Holds the current batch\n      this.s.currentBatch = undefined;\n      // Get the right type of batch\n      if (batchType === common_1.BatchType.INSERT) {\n        this.s.currentBatch = this.s.currentInsertBatch;\n      } else if (batchType === common_1.BatchType.UPDATE) {\n        this.s.currentBatch = this.s.currentUpdateBatch;\n      } else if (batchType === common_1.BatchType.DELETE) {\n        this.s.currentBatch = this.s.currentRemoveBatch;\n      }\n      var maxKeySize = this.s.maxKeySize;\n      // Create a new batch object if we don't have a current one\n      if (this.s.currentBatch == null) {\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n      }\n      // Check if we need to create a new batch\n      if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType) {\n        // Save the batch to the execution stack\n        this.s.batches.push(this.s.currentBatch);\n        // Create a new batch\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n      }\n      // We have an array of documents\n      if (Array.isArray(document)) {\n        throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n      }\n      this.s.currentBatch.operations.push(document);\n      this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n      this.s.currentIndex = this.s.currentIndex + 1;\n      // Save back the current Batch to the right type\n      if (batchType === common_1.BatchType.INSERT) {\n        this.s.currentInsertBatch = this.s.currentBatch;\n        this.s.bulkResult.insertedIds.push({\n          index: this.s.bulkResult.insertedIds.length,\n          _id: document._id\n        });\n      } else if (batchType === common_1.BatchType.UPDATE) {\n        this.s.currentUpdateBatch = this.s.currentBatch;\n      } else if (batchType === common_1.BatchType.DELETE) {\n        this.s.currentRemoveBatch = this.s.currentBatch;\n      }\n      // Update current batch size\n      this.s.currentBatch.size += 1;\n      this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n      return this;\n    }\n  }]);\n  return UnorderedBulkOperation;\n}(common_1.BulkOperationBase);\nexports.UnorderedBulkOperation = UnorderedBulkOperation;","map":{"version":3,"names":["BSON","require","error_1","common_1","UnorderedBulkOperation","_common_1$BulkOperati","_inherits","collection","options","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_createClass","key","value","handleWriteError","callback","writeResult","s","batches","length","_get","prototype","addToOperationsList","batchType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","maxBsonObjectSize","MongoInvalidArgumentError","concat","currentBatch","undefined","BatchType","INSERT","currentInsertBatch","UPDATE","currentUpdateBatch","DELETE","currentRemoveBatch","maxKeySize","Batch","currentIndex","size","maxWriteBatchSize","sizeBytes","maxBatchSizeBytes","push","Array","isArray","operations","originalIndexes","bulkResult","insertedIds","index","_id","BulkOperationBase","exports"],"sources":["../../src/bulk/unordered.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}