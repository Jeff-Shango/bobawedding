{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedBulkOperation = void 0;\nvar BSON = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar common_1 = require(\"./common\");\n/** @public */\nvar OrderedBulkOperation = /*#__PURE__*/function (_common_1$BulkOperati) {\n  _inherits(OrderedBulkOperation, _common_1$BulkOperati);\n  /** @internal */\n  function OrderedBulkOperation(collection, options) {\n    _classCallCheck(this, OrderedBulkOperation);\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrderedBulkOperation).call(this, collection, options, true));\n  }\n  _createClass(OrderedBulkOperation, [{\n    key: \"addToOperationsList\",\n    value: function addToOperationsList(batchType, document) {\n      // Get the bsonSize\n      var bsonSize = BSON.calculateObjectSize(document, {\n        checkKeys: false,\n        // Since we don't know what the user selected for BSON options here,\n        // err on the safe side, and check the size with ignoreUndefined: false.\n        ignoreUndefined: false\n      });\n      // Throw error if the doc is bigger than the max BSON size\n      if (bsonSize >= this.s.maxBsonObjectSize)\n        // TODO(NODE-3483): Change this to MongoBSONError\n        throw new error_1.MongoInvalidArgumentError(\"Document is larger than the maximum size \".concat(this.s.maxBsonObjectSize));\n      // Create a new batch object if we don't have a current one\n      if (this.s.currentBatch == null) {\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n      }\n      var maxKeySize = this.s.maxKeySize;\n      // Check if we need to create a new batch\n      if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType) {\n        // Save the batch to the execution stack\n        this.s.batches.push(this.s.currentBatch);\n        // Create a new batch\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        // Reset the current size trackers\n        this.s.currentBatchSize = 0;\n        this.s.currentBatchSizeBytes = 0;\n      }\n      if (batchType === common_1.BatchType.INSERT) {\n        this.s.bulkResult.insertedIds.push({\n          index: this.s.currentIndex,\n          _id: document._id\n        });\n      }\n      // We have an array of documents\n      if (Array.isArray(document)) {\n        throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n      }\n      this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n      this.s.currentBatch.operations.push(document);\n      this.s.currentBatchSize += 1;\n      this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n      this.s.currentIndex += 1;\n      return this;\n    }\n  }]);\n  return OrderedBulkOperation;\n}(common_1.BulkOperationBase);\nexports.OrderedBulkOperation = OrderedBulkOperation;","map":{"version":3,"names":["BSON","require","error_1","common_1","OrderedBulkOperation","_common_1$BulkOperati","_inherits","collection","options","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_createClass","key","value","addToOperationsList","batchType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","s","maxBsonObjectSize","MongoInvalidArgumentError","concat","currentBatch","Batch","currentIndex","maxKeySize","currentBatchSize","maxWriteBatchSize","currentBatchSizeBytes","maxBatchSizeBytes","batches","push","BatchType","INSERT","bulkResult","insertedIds","index","_id","Array","isArray","originalIndexes","operations","BulkOperationBase","exports"],"sources":["../../src/bulk/ordered.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}