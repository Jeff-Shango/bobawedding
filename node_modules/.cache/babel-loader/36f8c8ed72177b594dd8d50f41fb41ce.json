{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nvar admin_1 = require(\"./admin\");\nvar bson_1 = require(\"./bson\");\nvar change_stream_1 = require(\"./change_stream\");\nvar collection_1 = require(\"./collection\");\nvar CONSTANTS = require(\"./constants\");\nvar aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nvar list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nvar run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nvar error_1 = require(\"./error\");\nvar collections_1 = require(\"./operations/collections\");\nvar create_collection_1 = require(\"./operations/create_collection\");\nvar drop_1 = require(\"./operations/drop\");\nvar execute_operation_1 = require(\"./operations/execute_operation\");\nvar indexes_1 = require(\"./operations/indexes\");\nvar profiling_level_1 = require(\"./operations/profiling_level\");\nvar remove_user_1 = require(\"./operations/remove_user\");\nvar rename_1 = require(\"./operations/rename\");\nvar run_command_1 = require(\"./operations/run_command\");\nvar set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nvar stats_1 = require(\"./operations/stats\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar utils_1 = require(\"./utils\");\nvar write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nvar DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nvar Db = /*#__PURE__*/function () {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  function Db(client, databaseName, options) {\n    _classCallCheck(this, Db);\n    options = options ?? {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options: options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n    this.client = client;\n  }\n  _createClass(Db, [{\n    key: \"createCollection\",\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    value: function () {\n      var _createCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function createCollection(_x, _x2) {\n        return _createCollection.apply(this, arguments);\n      }\n      return createCollection;\n    }()\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"command\",\n    value: function () {\n      var _command2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_command, options) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, _command, _objectSpread({}, (0, bson_1.resolveBSONOptions)(options), {\n                session: options?.session,\n                readPreference: options?.readPreference\n              }))));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function command(_x3, _x4) {\n        return _command2.apply(this, arguments);\n      }\n      return command;\n    }()\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"aggregate\",\n    value: function aggregate() {\n      var pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    } /** Return the Admin db instance */\n  }, {\n    key: \"admin\",\n    value: function admin() {\n      return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n  }, {\n    key: \"collection\",\n    value: function collection(name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof options === 'function') {\n        throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n      }\n      return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"stats\",\n    value: function () {\n      var _stats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function stats(_x5) {\n        return _stats.apply(this, arguments);\n      }\n      return stats;\n    }()\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"renameCollection\",\n    value: function () {\n      var _renameCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(fromCollection, toCollection, options) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, _objectSpread({}, options, {\n                new_collection: true,\n                readPreference: read_preference_1.ReadPreference.primary\n              }))));\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function renameCollection(_x6, _x7, _x8) {\n        return _renameCollection.apply(this, arguments);\n      }\n      return renameCollection;\n    }()\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"dropCollection\",\n    value: function () {\n      var _dropCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(name, options) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function dropCollection(_x9, _x10) {\n        return _dropCollection.apply(this, arguments);\n      }\n      return dropCollection;\n    }()\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"dropDatabase\",\n    value: function () {\n      var _dropDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function dropDatabase(_x11) {\n        return _dropDatabase.apply(this, arguments);\n      }\n      return dropDatabase;\n    }()\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"collections\",\n    value: function () {\n      var _collections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(options) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function collections(_x12) {\n        return _collections.apply(this, arguments);\n      }\n      return collections;\n    }()\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"createIndex\",\n    value: function () {\n      var _createIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(name, indexSpec, options) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function createIndex(_x13, _x14, _x15) {\n        return _createIndex.apply(this, arguments);\n      }\n      return createIndex;\n    }()\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"removeUser\",\n    value: function () {\n      var _removeUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(username, options) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function removeUser(_x16, _x17) {\n        return _removeUser.apply(this, arguments);\n      }\n      return removeUser;\n    }()\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"setProfilingLevel\",\n    value: function () {\n      var _setProfilingLevel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(level, options) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function setProfilingLevel(_x18, _x19) {\n        return _setProfilingLevel.apply(this, arguments);\n      }\n      return setProfilingLevel;\n    }()\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"profilingLevel\",\n    value: function () {\n      var _profilingLevel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(options) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function profilingLevel(_x20) {\n        return _profilingLevel.apply(this, arguments);\n      }\n      return profilingLevel;\n    }()\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"indexInformation\",\n    value: function () {\n      var _indexInformation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(name, options) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function indexInformation(_x21, _x22) {\n        return _indexInformation.apply(this, arguments);\n      }\n      return indexInformation;\n    }()\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n  }, {\n    key: \"watch\",\n    value: function watch() {\n      var pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Allow optionally not specifying a pipeline\n      if (!Array.isArray(pipeline)) {\n        options = pipeline;\n        pipeline = [];\n      }\n      return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n  }, {\n    key: \"runCursorCommand\",\n    value: function runCursorCommand(command, options) {\n      return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n  }, {\n    key: \"databaseName\",\n    get: function get() {\n      return this.s.namespace.db;\n    } // Options\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n  }, {\n    key: \"secondaryOk\",\n    get: function get() {\n      return this.s.readPreference?.preference !== 'primary' || false;\n    }\n  }, {\n    key: \"readConcern\",\n    get: function get() {\n      return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n  }, {\n    key: \"readPreference\",\n    get: function get() {\n      if (this.s.readPreference == null) {\n        return this.client.readPreference;\n      }\n      return this.s.readPreference;\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    } // get the write Concern\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"namespace\",\n    get: function get() {\n      return this.s.namespace.toString();\n    }\n  }]);\n  return Db;\n}();\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  var invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (var i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(\"database names cannot contain the character '\".concat(invalidChars[i], \"'\"));\n  }\n}","map":{"version":3,"names":["admin_1","require","bson_1","change_stream_1","collection_1","CONSTANTS","aggregation_cursor_1","list_collections_cursor_1","run_command_cursor_1","error_1","collections_1","create_collection_1","drop_1","execute_operation_1","indexes_1","profiling_level_1","remove_user_1","rename_1","run_command_1","set_profiling_level_1","stats_1","read_concern_1","read_preference_1","utils_1","write_concern_1","DB_OPTIONS_ALLOW_LIST","Db","client","databaseName","options","_classCallCheck","filterOptions","validateDatabaseName","s","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","_createClass","key","value","_createCollection","_asyncToGenerator","_regeneratorRuntime","mark","_callee","name","wrap","_callee$","_context","prev","next","abrupt","executeOperation","CreateCollectionOperation","resolveOptions","stop","createCollection","_x","_x2","apply","arguments","_command2","_callee2","command","_callee2$","_context2","RunCommandOperation","_objectSpread","session","_x3","_x4","aggregate","pipeline","length","undefined","AggregationCursor","admin","Admin","collection","MongoInvalidArgumentError","Collection","_stats","_callee3","_callee3$","_context3","DbStatsOperation","stats","_x5","listCollections","filter","ListCollectionsCursor","_renameCollection","_callee4","fromCollection","toCollection","_callee4$","_context4","RenameOperation","new_collection","primary","renameCollection","_x6","_x7","_x8","_dropCollection","_callee5","_callee5$","_context5","DropCollectionOperation","dropCollection","_x9","_x10","_dropDatabase","_callee6","_callee6$","_context6","DropDatabaseOperation","dropDatabase","_x11","_collections","_callee7","_callee7$","_context7","CollectionsOperation","collections","_x12","_createIndex","_callee8","indexSpec","_callee8$","_context8","CreateIndexOperation","createIndex","_x13","_x14","_x15","_removeUser","_callee9","username","_callee9$","_context9","RemoveUserOperation","removeUser","_x16","_x17","_setProfilingLevel","_callee10","level","_callee10$","_context10","SetProfilingLevelOperation","setProfilingLevel","_x18","_x19","_profilingLevel","_callee11","_callee11$","_context11","ProfilingLevelOperation","profilingLevel","_x20","_indexInformation","_callee12","_callee12$","_context12","IndexInformationOperation","indexInformation","_x21","_x22","watch","Array","isArray","ChangeStream","runCursorCommand","RunCommandCursor","get","db","preference","toString","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","exports","invalidChars","i","indexOf","MongoAPIError","concat"],"sources":["../src/db.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}