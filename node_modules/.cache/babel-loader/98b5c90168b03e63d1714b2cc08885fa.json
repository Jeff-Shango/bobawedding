{"ast":null,"code":"'use strict';\n\n// We define these manually to ensure they're always copied\n// even if they would move up the prototype chain\n// https://nodejs.org/api/http.html#http_class_http_incomingmessage\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar knownProperties = ['aborted', 'complete', 'headers', 'httpVersion', 'httpVersionMinor', 'httpVersionMajor', 'method', 'rawHeaders', 'rawTrailers', 'setTimeout', 'socket', 'statusCode', 'statusMessage', 'trailers', 'url'];\nmodule.exports = function (fromStream, toStream) {\n  if (toStream._readableState.autoDestroy) {\n    throw new Error('The second stream must have the `autoDestroy` option set to `false`');\n  }\n  var fromProperties = new Set(Object.keys(fromStream).concat(knownProperties));\n  var properties = {};\n  var _iterator = _createForOfIteratorHelper(fromProperties),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var property = _step.value;\n      // Don't overwrite existing properties.\n      if (property in toStream) {\n        return 1; // continue\n      }\n      properties[property] = {\n        get: function get() {\n          var value = fromStream[property];\n          var isFunction = typeof value === 'function';\n          return isFunction ? value.bind(fromStream) : value;\n        },\n        set: function set(value) {\n          fromStream[property] = value;\n        },\n        enumerable: true,\n        configurable: false\n      };\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      if (_loop()) continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  Object.defineProperties(toStream, properties);\n  fromStream.once('aborted', function () {\n    toStream.destroy();\n    toStream.emit('aborted');\n  });\n  fromStream.once('close', function () {\n    if (fromStream.complete) {\n      if (toStream.readable) {\n        toStream.once('end', function () {\n          toStream.emit('close');\n        });\n      } else {\n        toStream.emit('close');\n      }\n    } else {\n      toStream.emit('close');\n    }\n  });\n  return toStream;\n};","map":null,"metadata":{},"sourceType":"script"}