{"ast":null,"code":"var _jsxFileName = \"/home/jeffb/Desktop/bobawedding/src/weddingCommentServer/Comments.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport WedComment from './Comment.jsx';\nimport CommentForm from './CommentForm.jsx';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WedComments = ({\n  imageId,\n  currentUserId\n}) => {\n  _s();\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n\n  // const getReplies = commentId => {\n  //     return backendComments\n  //     .filter((backendComment) => backendComment.comment === commentId)\n  //     .sort( \n  //         (a, b) => \n  //             new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n  // };\n  const getReplies = commendId => {\n    return backendComments.filter(backendComment => backendComment.parentId === commendId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  };\n  //     const addComment = (text, parentId) => {\n  //         console.log(\"addComment\", text, parentId);\n  //         createCommentApi(text, parentId).then(comment => {\n  //             setBackendComments([comment, ...backendComments])\n  //             setActiveComment(null)\n  //         })\n  //     };\n\n  //     const deleteComment = (commentId) => {\n  // if (window.confirm('Sure about deleting this?')) {\n  //     deleteCommentApi(commentId).then(() => {\n  //         const updatedBackendComments = backendComments.filter((backendComment) => backendComment.id !== commentId);\n  //         setBackendComments(updatedBackendComments);\n  //     })\n  // }\n  //     }\n\n  //     const updateComment = (text, commentId) => {\n  //         updateCommentApi(text, commentId).then(() => {\n  //             const updatedBackendComments = backendComments.map(backendComment => {\n  //                 if (backendComment.id === commentId) {\n  //                     return { ...backendComment, body: text };\n  //                 }\n  //                 return backendComment;\n  //             });\n  //             setBackendComments(updatedBackendComments);\n  //             setActiveComment(null)\n  //         });\n  //     };\n\n  // useEffect(() => {\n  // getCommentsApi().then((data) => {\n  //     setBackendComments(data);\n  // });\n  // }, []);\n\n  // useEffect(() => {\n  //     getComments().then((data) => {\n  //         setBackendComments(data);\n  //     });\n  // }, []);\n\n  //     useEffect(() => {\n  //         const fetchComments = async () => {\n  //             try {\n  //                 const response = await fetch(`/comments/${imageId}`);\n  //                 if (response.ok) {\n  //                     const comments = await response.json();\n  //                     setBackendComments(comments);\n  //                 } else {\n  //                 console.error('Failed to fetch the wedding comments');\n  //             }\n  //         } catch (error) {\n  //                 console.error('error with fetching the wedding comments:', error);\n  //             }\n  //     };\n\n  //     fetchComments();\n  // }, []);\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        console.log(\"Sending GET request to fetch comments with imageId:\", imageId);\n        const response = await axios.get(`http://localhost:3012/comments/${imageId}`, {\n          // Request body goes here, if you have any data to send\n        });\n        console.log(\"Response status:\", response.status);\n        if (response.status === 200) {\n          const comments = response.data;\n          console.log(\"Received comments:\", comments);\n          setBackendComments(comments);\n        } else {\n          console.error('Failed to fetch the wedding comments');\n        }\n      } catch (error) {\n        console.error('Error with fetching the wedding comments:', error);\n      }\n    };\n    fetchComments();\n  }, [imageId]);\n\n  // useEffect(() => {\n  //   const fetchComments = async () => {\n  //       try {\n  //           const response = await fetch(`/comments/${imageId}`); // Use the provided imageId\n  //           if (response.ok) {\n  //               const comments = await response.json();\n  //               setBackendComments(comments);\n  //           } else {\n  //               console.error('Failed to fetch the wedding comments');\n  //           }\n  //       } catch (error) {\n  //           console.error('Error with fetching the wedding comments:', error);\n\n  //       }\n\n  //   };\n\n  //   fetchComments();\n  // }, [imageId]); // Include 'imageId' as a dependency\n\n  // const rootComments = backendComments.filter(\n  // (backendComment) => backendComment.parentId === null\n  // );\n\n  const addComment = async (text, commentator) => {\n    try {\n      const response = await fetch('http://localhost:3012/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          comment: text,\n          commentator\n        })\n      });\n      if (response.ok) {\n        const newComment = await response.json();\n        setBackendComments([newComment, ...backendComments]);\n        setActiveComment(null);\n      } else {\n        console.error('Failed to add comment');\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n  const deleteComment = async commentId => {\n    try {\n      const response = await fetch(`http://localhost:3012/${commentId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        const updatedBackendComments = backendComments.filter(backendComment => backendComment.id !== commentId);\n        setBackendComments(updatedBackendComments);\n      } else {\n        console.error('Failed to delete comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n  const updateComment = async (text, commentId) => {\n    try {\n      const response = await fetch(`http://localhost:3012/${commentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          comment: text,\n          commentator: currentUserId\n        })\n      });\n      if (response.ok) {\n        const updatedComment = await response.json();\n        console.log('Updated comment from server:', updatedComment);\n        const updatedBackendComments = backendComments.map(backendComment => {\n          if (backendComment.id === commentId) {\n            return {\n              ...backendComment,\n              comment: text\n            };\n          }\n          return backendComment;\n        });\n        setBackendComments(updatedBackendComments);\n        setActiveComment(null);\n      } else {\n        console.error('Failed to update comment');\n      }\n    } catch (error) {\n      console.error('Error updating comment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment,\n      imageId: imageId,\n      setBackendComments: setBackendComments,\n      backendComments: backendComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: backendComments.map(comment => /*#__PURE__*/_jsxDEV(WedComment, {\n        comment: comment.comment,\n        commentator: comment.commentator,\n        replies: getReplies(comment.id),\n        currentUserId: currentUserId,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        activeComment: activeComment,\n        setActiveComment: setActiveComment\n        // addComment={addComment}\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(WedComments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n_c = WedComments;\nexport default WedComments;\nvar _c;\n$RefreshReg$(_c, \"WedComments\");","map":{"version":3,"names":["React","useEffect","useState","WedComment","CommentForm","axios","jsxDEV","_jsxDEV","WedComments","imageId","currentUserId","_s","backendComments","setBackendComments","activeComment","setActiveComment","getReplies","commendId","filter","backendComment","parentId","sort","a","b","Date","createdAt","getTime","fetchComments","console","log","response","get","status","comments","data","error","addComment","text","commentator","fetch","method","headers","body","JSON","stringify","comment","ok","newComment","json","deleteComment","commentId","updatedBackendComments","id","updateComment","updatedComment","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submitLabel","handleSubmit","replies","_c","$RefreshReg$"],"sources":["/home/jeffb/Desktop/bobawedding/src/weddingCommentServer/Comments.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport WedComment from './Comment.jsx';\nimport CommentForm from './CommentForm.jsx';\nimport axios from 'axios'\n\nconst WedComments = ({ imageId, currentUserId }) => {\n    const [backendComments, setBackendComments] = useState([]);\n    const [activeComment, setActiveComment] = useState(null)\n\n    // const getReplies = commentId => {\n    //     return backendComments\n    //     .filter((backendComment) => backendComment.comment === commentId)\n    //     .sort( \n    //         (a, b) => \n    //             new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n    // };\n    const getReplies = commendId => {\n        return backendComments\n        .filter((backendComment) => backendComment.parentId === commendId)\n        .sort(\n            (a, b) => \n                new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n    };\n//     const addComment = (text, parentId) => {\n//         console.log(\"addComment\", text, parentId);\n//         createCommentApi(text, parentId).then(comment => {\n//             setBackendComments([comment, ...backendComments])\n//             setActiveComment(null)\n//         })\n//     };\n    \n//     const deleteComment = (commentId) => {\n// if (window.confirm('Sure about deleting this?')) {\n//     deleteCommentApi(commentId).then(() => {\n//         const updatedBackendComments = backendComments.filter((backendComment) => backendComment.id !== commentId);\n//         setBackendComments(updatedBackendComments);\n//     })\n// }\n//     }\n\n//     const updateComment = (text, commentId) => {\n//         updateCommentApi(text, commentId).then(() => {\n//             const updatedBackendComments = backendComments.map(backendComment => {\n//                 if (backendComment.id === commentId) {\n//                     return { ...backendComment, body: text };\n//                 }\n//                 return backendComment;\n//             });\n//             setBackendComments(updatedBackendComments);\n//             setActiveComment(null)\n//         });\n//     };\n\n    // useEffect(() => {\n    // getCommentsApi().then((data) => {\n    //     setBackendComments(data);\n    // });\n    // }, []);\n\n    // useEffect(() => {\n    //     getComments().then((data) => {\n    //         setBackendComments(data);\n    //     });\n    // }, []);\n\n//     useEffect(() => {\n//         const fetchComments = async () => {\n//             try {\n//                 const response = await fetch(`/comments/${imageId}`);\n//                 if (response.ok) {\n//                     const comments = await response.json();\n//                     setBackendComments(comments);\n//                 } else {\n//                 console.error('Failed to fetch the wedding comments');\n//             }\n//         } catch (error) {\n//                 console.error('error with fetching the wedding comments:', error);\n//             }\n//     };\n\n//     fetchComments();\n// }, []);\n\nuseEffect(() => {\n  const fetchComments = async () => {\n    try {\n      console.log(\"Sending GET request to fetch comments with imageId:\", imageId);\n      const response = await axios.get(`http://localhost:3012/comments/${imageId}`, {\n        // Request body goes here, if you have any data to send\n      });\n\n      console.log(\"Response status:\", response.status);\n\n      if (response.status === 200) {\n        const comments = response.data;\n        console.log(\"Received comments:\", comments);\n        setBackendComments(comments);\n      } else {\n        console.error('Failed to fetch the wedding comments');\n      }\n    } catch (error) {\n      console.error('Error with fetching the wedding comments:', error);\n    }\n  };\n\n  fetchComments();\n}, [imageId]);\n\n\n// useEffect(() => {\n//   const fetchComments = async () => {\n//       try {\n//           const response = await fetch(`/comments/${imageId}`); // Use the provided imageId\n//           if (response.ok) {\n//               const comments = await response.json();\n//               setBackendComments(comments);\n//           } else {\n//               console.error('Failed to fetch the wedding comments');\n//           }\n//       } catch (error) {\n//           console.error('Error with fetching the wedding comments:', error);\n          \n//       }\n      \n//   };\n\n//   fetchComments();\n// }, [imageId]); // Include 'imageId' as a dependency\n\n\n    // const rootComments = backendComments.filter(\n    // (backendComment) => backendComment.parentId === null\n    // );\n\n    const addComment = async (text, commentator) => {\n        try {\n          const response = await fetch('http://localhost:3012/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ comment: text, commentator }),\n          });\n\n          if (response.ok) {\n            const newComment = await response.json();\n            setBackendComments([newComment, ...backendComments]);\n            setActiveComment(null);\n          } else {\n            console.error('Failed to add comment');\n          }\n        } catch (error) {\n          console.error('Error adding comment:', error);\n        }\n      };\n    \n      const deleteComment = async (commentId) => {\n        try {\n          const response = await fetch(`http://localhost:3012/${commentId}`, {\n            method: 'DELETE',\n          });\n          if (response.ok) {\n            const updatedBackendComments = backendComments.filter(\n              (backendComment) => backendComment.id !== commentId\n            );\n            setBackendComments(updatedBackendComments);\n          } else {\n            console.error('Failed to delete comment');\n          }\n        } catch (error) {\n          console.error('Error deleting comment:', error);\n        }\n      };\n    \n      const updateComment = async (text, commentId) => {\n        try {\n          const response = await fetch(`http://localhost:3012/${commentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ comment: text, commentator: currentUserId }),\n          });\n          if (response.ok) {\n            const updatedComment = await response.json();\n            console.log('Updated comment from server:', updatedComment);\n            const updatedBackendComments = backendComments.map((backendComment) => {\n              if (backendComment.id === commentId) {\n                return { ...backendComment, comment: text };\n              }\n              return backendComment;\n            });\n            setBackendComments(updatedBackendComments);\n            setActiveComment(null);\n          } else {\n            console.error('Failed to update comment');\n          }\n        } catch (error) {\n          console.error('Error updating comment:', error);\n        }\n      };\n    \n\n  return (\n    <div className='comments'>\n        <h3 className=\"comments-title\">Comments</h3>\n        <div className=\"comment-form-title\">Write Comment</div>\n        <CommentForm \n          submitLabel=\"Write\" \n          handleSubmit={addComment} \n          imageId={imageId}\n          setBackendComments={setBackendComments}\n          backendComments={backendComments}\n        />\n        <div className=\"comments-container\">\n            {backendComments.map((comment) => (\n                <WedComment \n                key={comment.id} \n                comment={comment.comment} \n                commentator={comment.commentator}\n                replies={getReplies(comment.id)} \n                currentUserId={currentUserId}\n                deleteComment={deleteComment}\n                updateComment={updateComment}\n                activeComment={activeComment}\n                setActiveComment={setActiveComment}\n                // addComment={addComment}\n                />\n                \n            ))}\n        </div>\n    </div>\n  )\n}\n\nexport default WedComments"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,WAAW,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMc,UAAU,GAAGC,SAAS,IAAI;IAC5B,OAAOL,eAAe,CACrBM,MAAM,CAAEC,cAAc,IAAKA,cAAc,CAACC,QAAQ,KAAKH,SAAS,CAAC,CACjEI,IAAI,CACD,CAACC,CAAC,EAAEC,CAAC,KACD,IAAIC,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,OAAO,CAAC,CACxE,CAAC;EACL,CAAC;EACL;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEAzB,SAAS,CAAC,MAAM;IACd,MAAM0B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEpB,OAAO,CAAC;QAC3E,MAAMqB,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAE,kCAAiCtB,OAAQ,EAAC,EAAE;UAC5E;QAAA,CACD,CAAC;QAEFmB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACE,MAAM,CAAC;QAEhD,IAAIF,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,IAAI;UAC9BN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,QAAQ,CAAC;UAC3CpB,kBAAkB,CAACoB,QAAQ,CAAC;QAC9B,CAAC,MAAM;UACLL,OAAO,CAACO,KAAK,CAAC,sCAAsC,CAAC;QACvD;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE;IACF,CAAC;IAEDR,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAAClB,OAAO,CAAC,CAAC;;EAGb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;;EAGI;EACA;EACA;;EAEA,MAAM2B,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,WAAW,KAAK;IAC5C,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,wBAAwB,EAAE;QACrDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAER,IAAI;UAAEC;QAAY,CAAC;MACrD,CAAC,CAAC;MAEF,IAAIR,QAAQ,CAACgB,EAAE,EAAE;QACf,MAAMC,UAAU,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;QACxCnC,kBAAkB,CAAC,CAACkC,UAAU,EAAE,GAAGnC,eAAe,CAAC,CAAC;QACpDG,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,MAAM;QACLa,OAAO,CAACO,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAMc,aAAa,GAAG,MAAOC,SAAS,IAAK;IACzC,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMS,KAAK,CAAE,yBAAwBW,SAAU,EAAC,EAAE;QACjEV,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAIV,QAAQ,CAACgB,EAAE,EAAE;QACf,MAAMK,sBAAsB,GAAGvC,eAAe,CAACM,MAAM,CAClDC,cAAc,IAAKA,cAAc,CAACiC,EAAE,KAAKF,SAC5C,CAAC;QACDrC,kBAAkB,CAACsC,sBAAsB,CAAC;MAC5C,CAAC,MAAM;QACLvB,OAAO,CAACO,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMkB,aAAa,GAAG,MAAAA,CAAOhB,IAAI,EAAEa,SAAS,KAAK;IAC/C,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMS,KAAK,CAAE,yBAAwBW,SAAU,EAAC,EAAE;QACjEV,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAER,IAAI;UAAEC,WAAW,EAAE5B;QAAc,CAAC;MACpE,CAAC,CAAC;MACF,IAAIoB,QAAQ,CAACgB,EAAE,EAAE;QACf,MAAMQ,cAAc,GAAG,MAAMxB,QAAQ,CAACkB,IAAI,CAAC,CAAC;QAC5CpB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEyB,cAAc,CAAC;QAC3D,MAAMH,sBAAsB,GAAGvC,eAAe,CAAC2C,GAAG,CAAEpC,cAAc,IAAK;UACrE,IAAIA,cAAc,CAACiC,EAAE,KAAKF,SAAS,EAAE;YACnC,OAAO;cAAE,GAAG/B,cAAc;cAAE0B,OAAO,EAAER;YAAK,CAAC;UAC7C;UACA,OAAOlB,cAAc;QACvB,CAAC,CAAC;QACFN,kBAAkB,CAACsC,sBAAsB,CAAC;QAC1CpC,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,MAAM;QACLa,OAAO,CAACO,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAGL,oBACE5B,OAAA;IAAKiD,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrBlD,OAAA;MAAIiD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5CtD,OAAA;MAAKiD,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvDtD,OAAA,CAACH,WAAW;MACV0D,WAAW,EAAC,OAAO;MACnBC,YAAY,EAAE3B,UAAW;MACzB3B,OAAO,EAAEA,OAAQ;MACjBI,kBAAkB,EAAEA,kBAAmB;MACvCD,eAAe,EAAEA;IAAgB;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFtD,OAAA;MAAKiD,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAC9B7C,eAAe,CAAC2C,GAAG,CAAEV,OAAO,iBACzBtC,OAAA,CAACJ,UAAU;QAEX0C,OAAO,EAAEA,OAAO,CAACA,OAAQ;QACzBP,WAAW,EAAEO,OAAO,CAACP,WAAY;QACjC0B,OAAO,EAAEhD,UAAU,CAAC6B,OAAO,CAACO,EAAE,CAAE;QAChC1C,aAAa,EAAEA,aAAc;QAC7BuC,aAAa,EAAEA,aAAc;QAC7BI,aAAa,EAAEA,aAAc;QAC7BvC,aAAa,EAAEA,aAAc;QAC7BC,gBAAgB,EAAEA;QAClB;MAAA,GATK8B,OAAO,CAACO,EAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUd,CAEJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAlD,EAAA,CArOKH,WAAW;AAAAyD,EAAA,GAAXzD,WAAW;AAuOjB,eAAeA,WAAW;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}