{"ast":null,"code":"var _require = require('crypto'),\n  signOneShot = _require.sign,\n  verifyOneShot = _require.verify,\n  createSign = _require.createSign,\n  createVerify = _require.createVerify,\n  getCurves = _require.getCurves;\nvar _require2 = require('../help/ecdsa_signatures'),\n  derToJose = _require2.derToJose,\n  joseToDer = _require2.joseToDer;\nvar _require3 = require('../help/consts'),\n  KEYOBJECT = _require3.KEYOBJECT;\nvar resolveNodeAlg = require('../help/node_alg');\nvar _require4 = require('../help/key_object'),\n  asInput = _require4.asInput;\nvar _require5 = require('../help/runtime_support'),\n  dsaEncodingSupported = _require5.dsaEncodingSupported;\nvar sign, verify;\nif (dsaEncodingSupported) {\n  sign = function sign(jwaAlg, nodeAlg, _ref, payload) {\n    var keyObject = _ref[KEYOBJECT];\n    if (typeof payload === 'string') {\n      payload = Buffer.from(payload);\n    }\n    return signOneShot(nodeAlg, payload, {\n      key: asInput(keyObject, false),\n      dsaEncoding: 'ieee-p1363'\n    });\n  };\n  verify = function verify(jwaAlg, nodeAlg, _ref2, payload, signature) {\n    var keyObject = _ref2[KEYOBJECT];\n    try {\n      return verifyOneShot(nodeAlg, payload, {\n        key: asInput(keyObject, true),\n        dsaEncoding: 'ieee-p1363'\n      }, signature);\n    } catch (err) {\n      return false;\n    }\n  };\n} else {\n  sign = function sign(jwaAlg, nodeAlg, _ref3, payload) {\n    var keyObject = _ref3[KEYOBJECT];\n    return derToJose(createSign(nodeAlg).update(payload).sign(asInput(keyObject, false)), jwaAlg);\n  };\n  verify = function verify(jwaAlg, nodeAlg, _ref4, payload, signature) {\n    var keyObject = _ref4[KEYOBJECT];\n    try {\n      return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), joseToDer(signature, jwaAlg));\n    } catch (err) {\n      return false;\n    }\n  };\n}\nvar crvToAlg = function crvToAlg(crv) {\n  switch (crv) {\n    case 'P-256':\n      return 'ES256';\n    case 'secp256k1':\n      return 'ES256K';\n    case 'P-384':\n      return 'ES384';\n    case 'P-521':\n      return 'ES512';\n  }\n};\nmodule.exports = function (JWA, JWK) {\n  var algs = [];\n  if (getCurves().includes('prime256v1')) {\n    algs.push('ES256');\n  }\n  if (getCurves().includes('secp256k1')) {\n    algs.push('ES256K');\n  }\n  if (getCurves().includes('secp384r1')) {\n    algs.push('ES384');\n  }\n  if (getCurves().includes('secp521r1')) {\n    algs.push('ES512');\n  }\n  algs.forEach(function (jwaAlg) {\n    var nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, nodeAlg));\n    JWK.EC.sign[jwaAlg] = function (key) {\n      return key.private && JWK.EC.verify[jwaAlg](key);\n    };\n    JWK.EC.verify[jwaAlg] = function (key) {\n      return (key.use === 'sig' || key.use === undefined) && crvToAlg(key.crv) === jwaAlg;\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}