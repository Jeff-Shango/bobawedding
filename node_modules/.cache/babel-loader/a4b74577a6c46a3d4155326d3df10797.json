{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _possibleConstructorReturn from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _objectSpread from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _createClass from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nvar util_1 = require(\"util\");\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar delete_1 = require(\"../operations/delete\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar insert_1 = require(\"../operations/insert\");\nvar operation_1 = require(\"../operations/operation\");\nvar update_1 = require(\"../operations/update\");\nvar utils_1 = require(\"../utils\");\nvar write_concern_1 = require(\"../write_concern\");\n/** @internal */\nvar kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nvar Batch = function Batch(batchType, originalZeroIndex) {\n  _classCallCheck(this, Batch);\n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n};\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nvar BulkWriteResult = /*#__PURE__*/function () {\n  _createClass(BulkWriteResult, null, [{\n    key: \"generateIdMap\",\n    value: function generateIdMap(ids) {\n      var idMap = {};\n      var _iterator = _createForOfIteratorHelper(ids),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var doc = _step.value;\n          idMap[doc.index] = doc._id;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n  }]);\n  function BulkWriteResult(bulkResult) {\n    _classCallCheck(this, BulkWriteResult);\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  _createClass(BulkWriteResult, [{\n    key: \"getUpsertedIdAt\",\n    /** Returns the upserted id at the given index */value: function getUpsertedIdAt(index) {\n      return this.result.upserted[index];\n    } /** Returns raw internal result */\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      return this.result;\n    } /** Returns true if the bulk operation contains a write error */\n  }, {\n    key: \"hasWriteErrors\",\n    value: function hasWriteErrors() {\n      return this.result.writeErrors.length > 0;\n    } /** Returns the number of write errors off the bulk operation */\n  }, {\n    key: \"getWriteErrorCount\",\n    value: function getWriteErrorCount() {\n      return this.result.writeErrors.length;\n    } /** Returns a specific write error object */\n  }, {\n    key: \"getWriteErrorAt\",\n    value: function getWriteErrorAt(index) {\n      return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    } /** Retrieve all write errors */\n  }, {\n    key: \"getWriteErrors\",\n    value: function getWriteErrors() {\n      return this.result.writeErrors;\n    } /** Retrieve the write concern error if one exists */\n  }, {\n    key: \"getWriteConcernError\",\n    value: function getWriteConcernError() {\n      if (this.result.writeConcernErrors.length === 0) {\n        return;\n      } else if (this.result.writeConcernErrors.length === 1) {\n        // Return the error\n        return this.result.writeConcernErrors[0];\n      } else {\n        // Combine the errors\n        var errmsg = '';\n        for (var i = 0; i < this.result.writeConcernErrors.length; i++) {\n          var err = this.result.writeConcernErrors[i];\n          errmsg = errmsg + err.errmsg;\n          // TODO: Something better\n          if (i === 0) errmsg = errmsg + ' and ';\n        }\n        return new WriteConcernError({\n          errmsg: errmsg,\n          code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n        });\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"BulkWriteResult(\".concat(this.result, \")\");\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return this.result.ok === 1;\n    }\n  }, {\n    key: \"ok\",\n    get: function get() {\n      return this.result.ok;\n    }\n  }]);\n  return BulkWriteResult;\n}();\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nvar WriteConcernError = /*#__PURE__*/function () {\n  function WriteConcernError(error) {\n    _classCallCheck(this, WriteConcernError);\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n  _createClass(WriteConcernError, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this[kServerError];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteConcernError(\".concat(this.errmsg, \")\");\n    }\n  }, {\n    key: \"code\",\n    get: function get() {\n      return this[kServerError].code;\n    } /** Write concern error message. */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this[kServerError].errmsg;\n    } /** Write concern error info. */\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this[kServerError].errInfo;\n    }\n  }]);\n  return WriteConcernError;\n}();\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nvar WriteError = /*#__PURE__*/function () {\n  function WriteError(err) {\n    _classCallCheck(this, WriteError);\n    this.err = err;\n  }\n  /** WriteError code. */\n  _createClass(WriteError, [{\n    key: \"getOperation\",\n    /** Returns the underlying operation that caused the error */value: function getOperation() {\n      return this.err.op;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.err.code,\n        index: this.err.index,\n        errmsg: this.err.errmsg,\n        op: this.err.op\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteError(\".concat(JSON.stringify(this.toJSON()), \")\");\n    }\n  }, {\n    key: \"code\",\n    get: function get() {\n      return this.err.code;\n    } /** WriteError original bulk operation index. */\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.err.index;\n    } /** WriteError message. */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this.err.errmsg;\n    } /** WriteError details. */\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this.err.errInfo;\n    }\n  }]);\n  return WriteError;\n}();\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    var writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  var nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (var _i = 0; _i < result.writeErrors.length; _i++) {\n      var _writeError = {\n        index: batch.originalIndexes[result.writeErrors[_i].index],\n        code: result.writeErrors[_i].code,\n        errmsg: result.writeErrors[_i].errmsg,\n        errInfo: result.writeErrors[_i].errInfo,\n        op: batch.operations[result.writeErrors[_i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(_writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n  var batch = bulkOperation.s.batches.shift();\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    var writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n  var finalOptions = (0, utils_1.resolveOptions)(bulkOperation, _objectSpread({}, options, {\n    ordered: bulkOperation.isOrdered\n  }));\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.multi;\n      });\n    }\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.limit === 0;\n      });\n    }\n  }\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: err.result?.writeConcernError.errmsg,\n    code: err.result?.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nvar MongoBulkWriteError = /*#__PURE__*/function (_error_1$MongoServerE) {\n  _inherits(MongoBulkWriteError, _error_1$MongoServerE);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoBulkWriteError(error, result) {\n    var _this;\n    _classCallCheck(this, MongoBulkWriteError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoBulkWriteError).call(this, error));\n    _this.writeErrors = [];\n    if (error instanceof WriteConcernError) _this.err = error;else if (!(error instanceof Error)) {\n      _this.message = error.message;\n      _this.code = error.code;\n      _this.writeErrors = error.writeErrors ?? [];\n    }\n    _this.result = result;\n    Object.assign(_assertThisInitialized(_assertThisInitialized(_this)), error);\n    return _this;\n  }\n  _createClass(MongoBulkWriteError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoBulkWriteError';\n    } /** Number of documents inserted. */\n  }, {\n    key: \"insertedCount\",\n    get: function get() {\n      return this.result.insertedCount;\n    } /** Number of documents matched for update. */\n  }, {\n    key: \"matchedCount\",\n    get: function get() {\n      return this.result.matchedCount;\n    } /** Number of documents modified. */\n  }, {\n    key: \"modifiedCount\",\n    get: function get() {\n      return this.result.modifiedCount;\n    } /** Number of documents deleted. */\n  }, {\n    key: \"deletedCount\",\n    get: function get() {\n      return this.result.deletedCount;\n    } /** Number of documents upserted. */\n  }, {\n    key: \"upsertedCount\",\n    get: function get() {\n      return this.result.upsertedCount;\n    } /** Inserted document generated Id's, hash key is the index of the originating operation */\n  }, {\n    key: \"insertedIds\",\n    get: function get() {\n      return this.result.insertedIds;\n    } /** Upserted document generated Id's, hash key is the index of the originating operation */\n  }, {\n    key: \"upsertedIds\",\n    get: function get() {\n      return this.result.upsertedIds;\n    }\n  }]);\n  return MongoBulkWriteError;\n}(error_1.MongoServerError);\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nvar FindOperators = /*#__PURE__*/function () {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  function FindOperators(bulkOperation) {\n    _classCallCheck(this, FindOperators);\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  _createClass(FindOperators, [{\n    key: \"update\",\n    value: function update(updateDocument) {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread({}, currentOp, {\n        multi: true\n      })));\n    } /** Add a single update operation to the bulk operation */\n  }, {\n    key: \"updateOne\",\n    value: function updateOne(updateDocument) {\n      if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n        throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n      }\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread({}, currentOp, {\n        multi: false\n      })));\n    } /** Add a replace one operation to the bulk operation */\n  }, {\n    key: \"replaceOne\",\n    value: function replaceOne(replacement) {\n      if ((0, utils_1.hasAtomicOperators)(replacement)) {\n        throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n      }\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, _objectSpread({}, currentOp, {\n        multi: false\n      })));\n    } /** Add a delete one operation to the bulk operation */\n  }, {\n    key: \"deleteOne\",\n    value: function deleteOne() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread({}, currentOp, {\n        limit: 1\n      })));\n    } /** Add a delete many operation to the bulk operation */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread({}, currentOp, {\n        limit: 0\n      })));\n    } /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  }, {\n    key: \"upsert\",\n    value: function upsert() {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.upsert = true;\n      return this;\n    } /** Specifies the collation for the query condition. */\n  }, {\n    key: \"collation\",\n    value: function collation(_collation) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.collation = _collation;\n      return this;\n    } /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  }, {\n    key: \"arrayFilters\",\n    value: function arrayFilters(_arrayFilters) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.arrayFilters = _arrayFilters;\n      return this;\n    } /** Specifies hint for the bulk operation. */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.hint = _hint;\n      return this;\n    }\n  }]);\n  return FindOperators;\n}();\nexports.FindOperators = FindOperators;\nvar executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nvar BulkWriteShimOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(BulkWriteShimOperation, _operation_1$Abstract);\n  function BulkWriteShimOperation(bulkOperation, options) {\n    var _this2;\n    _classCallCheck(this, BulkWriteShimOperation);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BulkWriteShimOperation).call(this, options));\n    _this2.bulkOperation = bulkOperation;\n    return _this2;\n  }\n  _createClass(BulkWriteShimOperation, [{\n    key: \"execute\",\n    value: function execute(_server, session) {\n      if (this.options.session == null) {\n        // An implicit session could have been created by 'executeOperation'\n        // So if we stick it on finalOptions here, each bulk operation\n        // will use this same session, it'll be passed in the same way\n        // an explicit session would be\n        this.options.session = session;\n      }\n      return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n  }]);\n  return BulkWriteShimOperation;\n}(operation_1.AbstractOperation);\n/** @public */\nvar BulkOperationBase = /*#__PURE__*/function () {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  function BulkOperationBase(collection, options, isOrdered) {\n    _classCallCheck(this, BulkOperationBase);\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    var topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    var namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    var executed = false;\n    // Current item\n    var currentOp = undefined;\n    // Set max byte size\n    var hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    var usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    var maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    var maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    var maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    var maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    var finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    var bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult: bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize: maxBsonObjectSize,\n      maxBatchSizeBytes: maxBatchSizeBytes,\n      maxWriteBatchSize: maxWriteBatchSize,\n      maxKeySize: maxKeySize,\n      // Namespace\n      namespace: namespace,\n      // Topology\n      topology: topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp: currentOp,\n      // Executed\n      executed: executed,\n      // Collection\n      collection: collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  _createClass(BulkOperationBase, [{\n    key: \"insert\",\n    value: function insert(document) {\n      if (document._id == null && !shouldForceServerObjectId(this)) {\n        document._id = new bson_1.ObjectId();\n      }\n      return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n  }, {\n    key: \"find\",\n    value: function find(selector) {\n      if (!selector) {\n        throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n      }\n      // Save a current selector\n      this.s.currentOp = {\n        selector: selector\n      };\n      return new FindOperators(this);\n    } /** Specifies a raw operation to perform in the bulk write. */\n  }, {\n    key: \"raw\",\n    value: function raw(op) {\n      if (op == null || typeof op !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n      }\n      if ('insertOne' in op) {\n        var forceServerObjectId = shouldForceServerObjectId(this);\n        if (op.insertOne && op.insertOne.document == null) {\n          // NOTE: provided for legacy support, but this is a malformed operation\n          if (forceServerObjectId !== true && op.insertOne._id == null) {\n            op.insertOne._id = new bson_1.ObjectId();\n          }\n          return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n        }\n        if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n          op.insertOne.document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n      }\n      if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n        if ('replaceOne' in op) {\n          if ('q' in op.replaceOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, _objectSpread({}, op.replaceOne, {\n            multi: false\n          }));\n          if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n        }\n        if ('updateOne' in op) {\n          if ('q' in op.updateOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var _updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, _objectSpread({}, op.updateOne, {\n            multi: false\n          }));\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement);\n        }\n        if ('updateMany' in op) {\n          if ('q' in op.updateMany) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var _updateStatement2 = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, _objectSpread({}, op.updateMany, {\n            multi: true\n          }));\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement2.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement2);\n        }\n      }\n      if ('deleteOne' in op) {\n        if ('q' in op.deleteOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, _objectSpread({}, op.deleteOne, {\n          limit: 1\n        })));\n      }\n      if ('deleteMany' in op) {\n        if ('q' in op.deleteMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, _objectSpread({}, op.deleteMany, {\n          limit: 0\n        })));\n      }\n      // otherwise an unknown operation was provided\n      throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n          writeConcern,\n          finalOptions,\n          operation,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              if (!this.s.executed) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoBatchReExecutionError();\n            case 3:\n              writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n              if (writeConcern) {\n                this.s.writeConcern = writeConcern;\n              }\n              // If we have current batch\n              if (this.isOrdered) {\n                if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n              } else {\n                if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n                if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n                if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n              }\n              // If we have no operations in the bulk raise an error\n              if (!(this.s.batches.length === 0)) {\n                _context.next = 8;\n                break;\n              }\n              throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n            case 8:\n              this.s.executed = true;\n              finalOptions = _objectSpread({}, this.s.options, options);\n              operation = new BulkWriteShimOperation(this, finalOptions);\n              return _context.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.s.collection.client, operation));\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n  }, {\n    key: \"handleWriteError\",\n    value: function handleWriteError(callback, writeResult) {\n      if (this.s.bulkResult.writeErrors.length > 0) {\n        var msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n        callback(new MongoBulkWriteError({\n          message: msg,\n          code: this.s.bulkResult.writeErrors[0].code,\n          writeErrors: this.s.bulkResult.writeErrors\n        }, writeResult));\n        return true;\n      }\n      var writeConcernError = writeResult.getWriteConcernError();\n      if (writeConcernError) {\n        callback(new MongoBulkWriteError(writeConcernError, writeResult));\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    }\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"batches\",\n    get: function get() {\n      var batches = _toConsumableArray(this.s.batches);\n      if (this.isOrdered) {\n        if (this.s.currentBatch) batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n      }\n      return batches;\n    }\n  }]);\n  return BulkOperationBase;\n}();\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get: function get() {\n    return this.s.currentIndex;\n  }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n  return false;\n}\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  var currentOp = bulkOp.s.currentOp;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"names":["util_1","require","bson_1","error_1","delete_1","execute_operation_1","insert_1","operation_1","update_1","utils_1","write_concern_1","kServerError","Symbol","exports","BatchType","Object","freeze","INSERT","UPDATE","DELETE","Batch","batchType","originalZeroIndex","_classCallCheck","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","_createClass","key","value","generateIdMap","ids","idMap","_iterator","_createForOfIteratorHelper","_step","s","n","done","doc","index","_id","err","e","f","bulkResult","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","insertedIds","defineProperty","enumerable","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","WriteConcernError","code","MONGODB_ERROR_CODES","WriteConcernFailed","toString","concat","isOk","ok","get","error","toJSON","errInfo","WriteError","getOperation","op","JSON","stringify","mergeBatchResults","batch","writeError","message","push","isInsertBatch","isDeleteBatch","nUpserted","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","batches","shift","resultHandler","MongoWriteConcernError","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","handleWriteError","finalOptions","resolveOptions","_objectSpread","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","executeOperation","collection","client","InsertOperation","namespace","UpdateOperation","DeleteOperation","_error_1$MongoServerE","_inherits","_this","_possibleConstructorReturn","_getPrototypeOf","call","Error","assign","_assertThisInitialized","MongoServerError","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","makeUpdateStatement","selector","updateOne","hasAtomicOperators","MongoInvalidArgumentError","replaceOne","replacement","deleteOne","makeDeleteStatement","_delete","upsert","collation","arrayFilters","hint","executeCommandsAsync","promisify","BulkWriteShimOperation","_operation_1$Abstract","_this2","execute","_server","session","AbstractOperation","BulkOperationBase","topology","getTopology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","applyRetryableWrites","db","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","WriteConcern","fromOptions","bsonOptions","resolveBSONOptions","insert","document","shouldForceServerObjectId","ObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","operation","_args","arguments","wrap","_callee$","_context","prev","next","MongoBatchReExecutionError","abrupt","stop","apply","msg","_toConsumableArray","prototype","bulkOp"],"sources":["../../src/bulk/common.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}