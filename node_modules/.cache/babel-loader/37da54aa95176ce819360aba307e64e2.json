{"ast":null,"code":"var _require = require('../errors'),\n  JWKKeySupport = _require.JWKKeySupport,\n  JOSENotSupported = _require.JOSENotSupported;\nvar _require2 = require('../help/consts'),\n  KEY_MANAGEMENT_ENCRYPT = _require2.KEY_MANAGEMENT_ENCRYPT,\n  KEY_MANAGEMENT_DECRYPT = _require2.KEY_MANAGEMENT_DECRYPT;\nvar _require3 = require('../registry'),\n  JWA = _require3.JWA,\n  JWK = _require3.JWK; // sign, verify\nrequire('./hmac')(JWA, JWK);\nrequire('./ecdsa')(JWA, JWK);\nrequire('./eddsa')(JWA, JWK);\nrequire('./rsassa_pss')(JWA, JWK);\nrequire('./rsassa')(JWA, JWK);\nrequire('./none')(JWA);\n\n// encrypt, decrypt\nrequire('./aes_cbc_hmac_sha2')(JWA, JWK);\nrequire('./aes_gcm')(JWA, JWK);\n\n// wrapKey, unwrapKey\nrequire('./rsaes')(JWA, JWK);\nrequire('./aes_kw')(JWA, JWK);\nrequire('./aes_gcm_kw')(JWA, JWK);\n\n// deriveKey\nrequire('./pbes2')(JWA, JWK);\nrequire('./ecdh/dir')(JWA, JWK);\nrequire('./ecdh/kw')(JWA, JWK);\nvar check = function check(key, op, alg) {\n  var cache = \"_\".concat(op, \"_\").concat(alg);\n  var label;\n  var keyOp;\n  if (op === 'keyManagementEncrypt') {\n    label = 'key management (encryption)';\n    keyOp = KEY_MANAGEMENT_ENCRYPT;\n  } else if (op === 'keyManagementDecrypt') {\n    label = 'key management (decryption)';\n    keyOp = KEY_MANAGEMENT_DECRYPT;\n  }\n  if (cache in key) {\n    if (key[cache]) {\n      return;\n    }\n    throw new JWKKeySupport(\"the key does not support \".concat(alg, \" \").concat(label || op, \" algorithm\"));\n  }\n  var value = true;\n  if (!JWA[op].has(alg)) {\n    throw new JOSENotSupported(\"unsupported \".concat(label || op, \" alg: \").concat(alg));\n  } else if (!key.algorithms(keyOp).has(alg)) {\n    value = false;\n  }\n  Object.defineProperty(key, cache, {\n    value: value,\n    enumerable: false\n  });\n  if (!value) {\n    return check(key, op, alg);\n  }\n};\nmodule.exports = {\n  check: check,\n  sign: function sign(alg, key, payload) {\n    check(key, 'sign', alg);\n    return JWA.sign.get(alg)(key, payload);\n  },\n  verify: function verify(alg, key, payload, signature) {\n    check(key, 'verify', alg);\n    return JWA.verify.get(alg)(key, payload, signature);\n  },\n  keyManagementEncrypt: function keyManagementEncrypt(alg, key, payload, opts) {\n    check(key, 'keyManagementEncrypt', alg);\n    return JWA.keyManagementEncrypt.get(alg)(key, payload, opts);\n  },\n  keyManagementDecrypt: function keyManagementDecrypt(alg, key, payload, opts) {\n    check(key, 'keyManagementDecrypt', alg);\n    return JWA.keyManagementDecrypt.get(alg)(key, payload, opts);\n  },\n  encrypt: function encrypt(alg, key, cleartext, opts) {\n    check(key, 'encrypt', alg);\n    return JWA.encrypt.get(alg)(key, cleartext, opts);\n  },\n  decrypt: function decrypt(alg, key, ciphertext, opts) {\n    check(key, 'decrypt', alg);\n    return JWA.decrypt.get(alg)(key, ciphertext, opts);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}