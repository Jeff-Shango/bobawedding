{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nvar error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nvar ReadPreference = /*#__PURE__*/function () {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  function ReadPreference(mode, tags, options) {\n    _classCallCheck(this, ReadPreference);\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(\"Invalid read preference mode \".concat(JSON.stringify(mode)));\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  }\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  _createClass(ReadPreference, [{\n    key: \"isValid\",\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    value: function isValid(mode) {\n      return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n  }, {\n    key: \"secondaryOk\",\n    value: function secondaryOk() {\n      var NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n      return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(readPreference) {\n      return readPreference.mode === this.mode;\n    } /** Return JSON representation */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var readPreference = {\n        mode: this.mode\n      };\n      if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n      if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n      if (this.hedge) readPreference.hedge = this.hedge;\n      return readPreference;\n    }\n  }, {\n    key: \"preference\",\n    get: function get() {\n      return this.mode;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(mode) {\n      return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n  }, {\n    key: \"fromOptions\",\n    value: function fromOptions(options) {\n      if (!options) return;\n      var readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n      var readPreferenceTags = options.readPreferenceTags;\n      if (readPreference == null) {\n        return;\n      }\n      if (typeof readPreference === 'string') {\n        return new ReadPreference(readPreference, readPreferenceTags, {\n          maxStalenessSeconds: options.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n        var mode = readPreference.mode || readPreference.preference;\n        if (mode && typeof mode === 'string') {\n          return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n            maxStalenessSeconds: readPreference.maxStalenessSeconds,\n            hedge: options.hedge\n          });\n        }\n      }\n      if (readPreferenceTags) {\n        readPreference.tags = readPreferenceTags;\n      }\n      return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n  }, {\n    key: \"translate\",\n    value: function translate(options) {\n      if (options.readPreference == null) return options;\n      var r = options.readPreference;\n      if (typeof r === 'string') {\n        options.readPreference = new ReadPreference(r);\n      } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n        var mode = r.mode || r.preference;\n        if (mode && typeof mode === 'string') {\n          options.readPreference = new ReadPreference(mode, r.tags, {\n            maxStalenessSeconds: r.maxStalenessSeconds\n          });\n        }\n      } else if (!(r instanceof ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference: \".concat(r));\n      }\n      return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid(mode) {\n      var VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n      return VALID_MODES.has(mode);\n    }\n  }]);\n  return ReadPreference;\n}();\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;","map":{"version":3,"names":["error_1","require","exports","ReadPreferenceMode","Object","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","ReadPreference","mode","tags","options","_classCallCheck","isValid","MongoInvalidArgumentError","concat","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","_createClass","key","value","secondaryOk","NEEDS_SECONDARYOK","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","equals","readPreference","toJSON","get","fromString","fromOptions","session","transaction","readPreferenceTags","preference","translate","r","VALID_MODES"],"sources":["../src/read_preference.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}