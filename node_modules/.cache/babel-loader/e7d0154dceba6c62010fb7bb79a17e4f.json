{"ast":null,"code":"var _objectSpread = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar isObject = require('../help/is_object');\nvar validateCrit = require('../help/validate_crit');\nvar _require = require('../errors'),\n  JWEInvalid = _require.JWEInvalid;\nvalidateCrit = validateCrit.bind(undefined, JWEInvalid);\nvar compactSerializer = function compactSerializer(final, _ref) {\n  var _ref2 = _slicedToArray(_ref, 1),\n    recipient = _ref2[0];\n  return \"\".concat(final.protected, \".\").concat(recipient.encrypted_key, \".\").concat(final.iv, \".\").concat(final.ciphertext, \".\").concat(final.tag);\n};\ncompactSerializer.validate = function (protectedHeader, unprotectedHeader, aad, _ref3) {\n  var header = _ref3[0].header,\n    length = _ref3.length;\n  if (length !== 1 || aad || unprotectedHeader || header) {\n    throw new JWEInvalid('JWE Compact Serialization doesn\\'t support multiple recipients, JWE unprotected headers or AAD');\n  }\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n};\nvar flattenedSerializer = function flattenedSerializer(final, _ref4) {\n  var _ref5 = _slicedToArray(_ref4, 1),\n    recipient = _ref5[0];\n  var header = recipient.header,\n    encryptedKey = recipient.encrypted_key;\n  return _objectSpread({}, final.protected ? {\n    protected: final.protected\n  } : undefined, final.unprotected ? {\n    unprotected: final.unprotected\n  } : undefined, header ? {\n    header: header\n  } : undefined, encryptedKey ? {\n    encrypted_key: encryptedKey\n  } : undefined, final.aad ? {\n    aad: final.aad\n  } : undefined, {\n    iv: final.iv,\n    ciphertext: final.ciphertext,\n    tag: final.tag\n  });\n};\nflattenedSerializer.validate = function (protectedHeader, unprotectedHeader, aad, _ref6) {\n  var header = _ref6[0].header,\n    length = _ref6.length;\n  if (length !== 1) {\n    throw new JWEInvalid('Flattened JWE JSON Serialization doesn\\'t support multiple recipients');\n  }\n  validateCrit(protectedHeader, _objectSpread({}, unprotectedHeader, header), protectedHeader ? protectedHeader.crit : undefined);\n};\nvar generalSerializer = function generalSerializer(final, recipients) {\n  var result = _objectSpread({}, final.protected ? {\n    protected: final.protected\n  } : undefined, final.unprotected ? {\n    unprotected: final.unprotected\n  } : undefined, {\n    recipients: recipients.map(function (_ref7) {\n      var header = _ref7.header,\n        encryptedKey = _ref7.encrypted_key,\n        generatedHeader = _ref7.generatedHeader;\n      if (!header && !encryptedKey && !generatedHeader) {\n        return false;\n      }\n      return _objectSpread({}, header || generatedHeader ? {\n        header: _objectSpread({}, header, generatedHeader)\n      } : undefined, encryptedKey ? {\n        encrypted_key: encryptedKey\n      } : undefined);\n    }).filter(Boolean)\n  }, final.aad ? {\n    aad: final.aad\n  } : undefined, {\n    iv: final.iv,\n    ciphertext: final.ciphertext,\n    tag: final.tag\n  });\n  if (!result.recipients.length) {\n    delete result.recipients;\n  }\n  return result;\n};\ngeneralSerializer.validate = function (protectedHeader, unprotectedHeader, aad, recipients) {\n  recipients.forEach(function (_ref8) {\n    var header = _ref8.header;\n    validateCrit(protectedHeader, _objectSpread({}, header, unprotectedHeader), protectedHeader ? protectedHeader.crit : undefined);\n  });\n};\nvar isJSON = function isJSON(input) {\n  return isObject(input) && typeof input.ciphertext === 'string' && typeof input.iv === 'string' && typeof input.tag === 'string' && (input.unprotected === undefined || isObject(input.unprotected)) && (input.protected === undefined || typeof input.protected === 'string') && (input.aad === undefined || typeof input.aad === 'string');\n};\nvar isSingleRecipient = function isSingleRecipient(input) {\n  return (input.encrypted_key === undefined || typeof input.encrypted_key === 'string') && (input.header === undefined || isObject(input.header));\n};\nvar isValidRecipient = function isValidRecipient(recipient) {\n  return isObject(recipient) && typeof recipient.encrypted_key === 'string' && (recipient.header === undefined || isObject(recipient.header));\n};\nvar isMultiRecipient = function isMultiRecipient(input) {\n  if (Array.isArray(input.recipients) && input.recipients.every(isValidRecipient)) {\n    return true;\n  }\n  return false;\n};\nvar detect = function detect(input) {\n  if (typeof input === 'string' && input.split('.').length === 5) {\n    return 'compact';\n  }\n  if (isJSON(input)) {\n    if (isMultiRecipient(input)) {\n      return 'general';\n    }\n    if (isSingleRecipient(input)) {\n      return 'flattened';\n    }\n  }\n  throw new JWEInvalid('JWE malformed or invalid serialization');\n};\nmodule.exports = {\n  compact: compactSerializer,\n  flattened: flattenedSerializer,\n  general: generalSerializer,\n  detect: detect\n};","map":null,"metadata":{},"sourceType":"script"}