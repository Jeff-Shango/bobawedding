{"ast":null,"code":"var _classCallCheck = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _toConsumableArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _objectSpread = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _objectWithoutProperties = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"/home/jeff/bobawedding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar _require = require('assert'),\n  assert = _require.strict,\n  AssertionError = _require.AssertionError;\nvar _require2 = require('jose'),\n  JWE = _require2.JWE,\n  JOSEError = _require2.errors.JOSEError;\nvar _require3 = require('util'),\n  promisify = _require3.promisify;\nvar cookie = require('cookie');\nvar onHeaders = require('on-headers');\nvar COOKIES = require('./cookies');\nvar _require4 = require('./crypto'),\n  getKeyStore = _require4.getKeyStore,\n  verifyCookie = _require4.verifyCookie,\n  signCookie = _require4.signCookie;\nvar debug = require('./debug')('appSession');\nvar epoch = function epoch() {\n  return Date.now() / 1000 | 0;\n};\nvar MAX_COOKIE_SIZE = 4096;\nvar REASSIGN = Symbol('reassign');\nvar REGENERATED_SESSION_ID = Symbol('regenerated_session_id');\nfunction attachSessionObject(req, sessionName, value) {\n  Object.defineProperty(req, sessionName, {\n    enumerable: true,\n    get: function get() {\n      return value;\n    },\n    set: function set(arg) {\n      if (arg === null || arg === undefined || arg[REASSIGN]) {\n        value = arg;\n      } else {\n        throw new TypeError('session object cannot be reassigned');\n      }\n      return undefined;\n    }\n  });\n}\nfunction regenerateSessionStoreId(_x, _x2) {\n  return _regenerateSessionStoreId.apply(this, arguments);\n}\nfunction _regenerateSessionStoreId() {\n  _regenerateSessionStoreId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, config) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!config.session.store) {\n            _context6.next = 4;\n            break;\n          }\n          _context6.next = 3;\n          return config.session.genid(req);\n        case 3:\n          req[REGENERATED_SESSION_ID] = _context6.sent;\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _regenerateSessionStoreId.apply(this, arguments);\n}\nfunction replaceSession(req, session, config) {\n  session[REASSIGN] = true;\n  req[config.session.name] = session;\n}\nmodule.exports = function (config) {\n  var alg = 'dir';\n  var enc = 'A256GCM';\n  var sessionName = config.session.name;\n  var cookieConfig = config.session.cookie;\n  var _config$session = config.session,\n    generateId = _config$session.genid,\n    absoluteDuration = _config$session.absoluteDuration,\n    rollingEnabled = _config$session.rolling,\n    rollingDuration = _config$session.rollingDuration,\n    signSessionStoreCookie = _config$session.signSessionStoreCookie,\n    requireSignedSessionStoreCookie = _config$session.requireSignedSessionStoreCookie;\n  var emptyTransient = cookieConfig.transient,\n    emptyCookieOptions = _objectWithoutProperties(cookieConfig, [\"transient\"]);\n  emptyCookieOptions.expires = emptyTransient ? 0 : new Date();\n  emptyCookieOptions.path = emptyCookieOptions.path || '/';\n  var emptyCookie = cookie.serialize(\"\".concat(sessionName, \".0\"), '', emptyCookieOptions);\n  var cookieChunkSize = MAX_COOKIE_SIZE - emptyCookie.length;\n  var _getKeyStore = getKeyStore(config.secret, true),\n    _getKeyStore2 = _slicedToArray(_getKeyStore, 2),\n    current = _getKeyStore2[0],\n    keystore = _getKeyStore2[1];\n  if (keystore.size === 1) {\n    keystore = current;\n  }\n  function encrypt(payload, headers) {\n    return JWE.encrypt(payload, current, _objectSpread({\n      alg: alg,\n      enc: enc\n    }, headers));\n  }\n  function decrypt(jwe) {\n    return JWE.decrypt(jwe, keystore, {\n      complete: true,\n      contentEncryptionAlgorithms: [enc],\n      keyManagementAlgorithms: [alg]\n    });\n  }\n  function calculateExp(iat, uat) {\n    if (!rollingEnabled) {\n      return iat + absoluteDuration;\n    }\n    return Math.min.apply(Math, _toConsumableArray([uat + rollingDuration, iat + absoluteDuration].filter(Boolean)));\n  }\n  function _setCookie(req, res, _ref) {\n    var _ref$uat = _ref.uat,\n      uat = _ref$uat === void 0 ? epoch() : _ref$uat,\n      _ref$iat = _ref.iat,\n      iat = _ref$iat === void 0 ? uat : _ref$iat,\n      _ref$exp = _ref.exp,\n      exp = _ref$exp === void 0 ? calculateExp(iat, uat) : _ref$exp;\n    var cookies = req[COOKIES];\n    var cookieTransient = cookieConfig.transient,\n      cookieOptions = _objectWithoutProperties(cookieConfig, [\"transient\"]);\n    cookieOptions.expires = cookieTransient ? 0 : new Date(exp * 1000);\n\n    // session was deleted or is empty, this matches all session cookies (chunked or unchunked)\n    // and clears them, essentially cleaning up what we've set in the past that is now trash\n    if (!req[sessionName] || !Object.keys(req[sessionName]).length) {\n      debug('session was deleted or is empty, clearing all matching session cookies');\n      for (var _i = 0, _Object$keys = Object.keys(cookies); _i < _Object$keys.length; _i++) {\n        var cookieName = _Object$keys[_i];\n        if (cookieName.match(\"^\".concat(sessionName, \"(?:\\\\.\\\\d)?$\"))) {\n          clearCookie(cookieName, res);\n        }\n      }\n    } else {\n      debug('found session, creating signed session cookie(s) with name %o(.i)', sessionName);\n      var value = encrypt(JSON.stringify(req[sessionName]), {\n        iat: iat,\n        uat: uat,\n        exp: exp\n      });\n      var chunkCount = Math.ceil(value.length / cookieChunkSize);\n      if (chunkCount > 1) {\n        debug('cookie size greater than %d, chunking', cookieChunkSize);\n        for (var i = 0; i < chunkCount; i++) {\n          var chunkValue = value.slice(i * cookieChunkSize, (i + 1) * cookieChunkSize);\n          var chunkCookieName = \"\".concat(sessionName, \".\").concat(i);\n          res.cookie(chunkCookieName, chunkValue, cookieOptions);\n        }\n        if (sessionName in cookies) {\n          debug('replacing non chunked cookie with chunked cookies');\n          clearCookie(sessionName, res);\n        }\n      } else {\n        res.cookie(sessionName, value, cookieOptions);\n        for (var _i2 = 0, _Object$keys2 = Object.keys(cookies); _i2 < _Object$keys2.length; _i2++) {\n          var _cookieName = _Object$keys2[_i2];\n          debug('replacing chunked cookies with non chunked cookies');\n          if (_cookieName.match(\"^\".concat(sessionName, \"\\\\.\\\\d$\"))) {\n            clearCookie(_cookieName, res);\n          }\n        }\n      }\n    }\n  }\n  function clearCookie(name, res) {\n    var domain = cookieConfig.domain,\n      path = cookieConfig.path,\n      sameSite = cookieConfig.sameSite,\n      secure = cookieConfig.secure;\n    res.clearCookie(name, {\n      domain: domain,\n      path: path,\n      sameSite: sameSite,\n      secure: secure\n    });\n  }\n  var CookieStore = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function CookieStore() {\n      _classCallCheck(this, CookieStore);\n    }\n    _createClass(CookieStore, [{\n      key: \"get\",\n      value: function () {\n        var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(idOrVal) {\n          var _decrypt, header, cleartext;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _decrypt = decrypt(idOrVal), header = _decrypt.protected, cleartext = _decrypt.cleartext;\n                return _context.abrupt(\"return\", {\n                  header: header,\n                  data: JSON.parse(cleartext)\n                });\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        function get(_x3) {\n          return _get.apply(this, arguments);\n        }\n        return get;\n      }()\n    }, {\n      key: \"getCookie\",\n      value: function getCookie(req) {\n        return req[COOKIES][sessionName];\n      }\n    }, {\n      key: \"setCookie\",\n      value: function setCookie(req, res, iat) {\n        _setCookie(req, res, iat);\n      }\n    }]);\n    return CookieStore;\n  }();\n  var CustomStore = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function CustomStore(store) {\n      _classCallCheck(this, CustomStore);\n      this._get = promisify(store.get).bind(store);\n      this._set = promisify(store.set).bind(store);\n      this._destroy = promisify(store.destroy).bind(store);\n      var _getKeyStore3 = getKeyStore(config.secret),\n        _getKeyStore4 = _slicedToArray(_getKeyStore3, 2),\n        current = _getKeyStore4[0],\n        keystore = _getKeyStore4[1];\n      if (keystore.size === 1) {\n        keystore = current;\n      }\n      this._keyStore = keystore;\n      this._current = current;\n    }\n    _createClass(CustomStore, [{\n      key: \"get\",\n      value: function () {\n        var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this._get(id));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function get(_x4) {\n          return _get2.apply(this, arguments);\n        }\n        return get;\n      }()\n    }, {\n      key: \"set\",\n      value: function () {\n        var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id, req, res, _ref2) {\n          var _ref2$uat, uat, _ref2$iat, iat, _ref2$exp, exp, hasPrevSession, replacingPrevSession, hasCurrentSession;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref2$uat = _ref2.uat, uat = _ref2$uat === void 0 ? epoch() : _ref2$uat, _ref2$iat = _ref2.iat, iat = _ref2$iat === void 0 ? uat : _ref2$iat, _ref2$exp = _ref2.exp, exp = _ref2$exp === void 0 ? calculateExp(iat, uat) : _ref2$exp;\n                hasPrevSession = !!req[COOKIES][sessionName];\n                replacingPrevSession = !!req[REGENERATED_SESSION_ID];\n                hasCurrentSession = req[sessionName] && Object.keys(req[sessionName]).length;\n                if (!(hasPrevSession && (replacingPrevSession || !hasCurrentSession))) {\n                  _context3.next = 7;\n                  break;\n                }\n                _context3.next = 7;\n                return this._destroy(id);\n              case 7:\n                if (!hasCurrentSession) {\n                  _context3.next = 10;\n                  break;\n                }\n                _context3.next = 10;\n                return this._set(req[REGENERATED_SESSION_ID] || id, {\n                  header: {\n                    iat: iat,\n                    uat: uat,\n                    exp: exp\n                  },\n                  data: req[sessionName],\n                  cookie: {\n                    expires: exp * 1000,\n                    maxAge: exp * 1000 - Date.now()\n                  }\n                });\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this);\n        }));\n        function set(_x5, _x6, _x7, _x8) {\n          return _set.apply(this, arguments);\n        }\n        return set;\n      }()\n    }, {\n      key: \"getCookie\",\n      value: function getCookie(req) {\n        if (signSessionStoreCookie) {\n          var verified = verifyCookie(sessionName, req[COOKIES][sessionName], this._keyStore);\n          if (requireSignedSessionStoreCookie) {\n            return verified;\n          }\n          return verified || req[COOKIES][sessionName];\n        }\n        return req[COOKIES][sessionName];\n      }\n    }, {\n      key: \"setCookie\",\n      value: function setCookie(id, req, res, _ref3) {\n        var _ref3$uat = _ref3.uat,\n          uat = _ref3$uat === void 0 ? epoch() : _ref3$uat,\n          _ref3$iat = _ref3.iat,\n          iat = _ref3$iat === void 0 ? uat : _ref3$iat,\n          _ref3$exp = _ref3.exp,\n          exp = _ref3$exp === void 0 ? calculateExp(iat, uat) : _ref3$exp;\n        if (!req[sessionName] || !Object.keys(req[sessionName]).length) {\n          if (req[COOKIES][sessionName]) {\n            clearCookie(sessionName, res);\n          }\n        } else {\n          var cookieOptions = _objectSpread({}, cookieConfig, {\n            expires: cookieConfig.transient ? 0 : new Date(exp * 1000)\n          });\n          delete cookieOptions.transient;\n          var value = id;\n          if (signSessionStoreCookie) {\n            value = signCookie(sessionName, id, this._current);\n          }\n          res.cookie(sessionName, value, cookieOptions);\n        }\n      }\n    }]);\n    return CustomStore;\n  }();\n  var isCustomStore = !!config.session.store;\n  var store = isCustomStore ? new CustomStore(config.session.store) : new CookieStore();\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res, next) {\n      var iat, uat, exp, existingSessionValue, _yield$store$get, header, data, id, origEnd;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!req.hasOwnProperty(sessionName)) {\n              _context5.next = 3;\n              break;\n            }\n            debug('request object (req) already has %o property, this is indicative of a middleware setup problem', sessionName);\n            return _context5.abrupt(\"return\", next(new Error(\"req[\".concat(sessionName, \"] is already set, did you run this middleware twice?\"))));\n          case 3:\n            req[COOKIES] = cookie.parse(req.get('cookie') || '');\n            _context5.prev = 4;\n            if (req[COOKIES].hasOwnProperty(sessionName)) {\n              // get JWE from unchunked session cookie\n              debug('reading session from %s cookie', sessionName);\n              existingSessionValue = store.getCookie(req);\n            } else if (req[COOKIES].hasOwnProperty(\"\".concat(sessionName, \".0\"))) {\n              // get JWE from chunked session cookie\n              // iterate all cookie names\n              // match and filter for the ones that match sessionName.<number>\n              // sort by chunk index\n              // concat\n              existingSessionValue = Object.entries(req[COOKIES]).map(function (_ref5) {\n                var _ref6 = _slicedToArray(_ref5, 2),\n                  cookie = _ref6[0],\n                  value = _ref6[1];\n                var match = cookie.match(\"^\".concat(sessionName, \"\\\\.(\\\\d+)$\"));\n                if (match) {\n                  return [match[1], value];\n                }\n              }).filter(Boolean).sort(function (_ref7, _ref8) {\n                var _ref9 = _slicedToArray(_ref7, 1),\n                  a = _ref9[0];\n                var _ref10 = _slicedToArray(_ref8, 1),\n                  b = _ref10[0];\n                return parseInt(a, 10) - parseInt(b, 10);\n              }).map(function (_ref11) {\n                var _ref12 = _slicedToArray(_ref11, 2),\n                  i = _ref12[0],\n                  chunk = _ref12[1];\n                debug('reading session chunk from %s.%d cookie', sessionName, i);\n                return chunk;\n              }).join('');\n            }\n            if (!existingSessionValue) {\n              _context5.next = 19;\n              break;\n            }\n            _context5.next = 9;\n            return store.get(existingSessionValue);\n          case 9:\n            _yield$store$get = _context5.sent;\n            header = _yield$store$get.header;\n            data = _yield$store$get.data;\n            // check that the existing session isn't expired based on options when it was established\n            iat = header.iat;\n            uat = header.uat;\n            exp = header.exp;\n            assert(exp > epoch(), 'it is expired based on options when it was established');\n\n            // check that the existing session isn't expired based on current rollingDuration rules\n            if (rollingDuration) {\n              assert(uat + rollingDuration > epoch(), 'it is expired based on current rollingDuration rules');\n            }\n\n            // check that the existing session isn't expired based on current absoluteDuration rules\n            if (absoluteDuration) {\n              assert(iat + absoluteDuration > epoch(), 'it is expired based on current absoluteDuration rules');\n            }\n            attachSessionObject(req, sessionName, data);\n          case 19:\n            _context5.next = 24;\n            break;\n          case 21:\n            _context5.prev = 21;\n            _context5.t0 = _context5[\"catch\"](4);\n            if (_context5.t0 instanceof AssertionError) {\n              debug('existing session was rejected because', _context5.t0.message);\n            } else if (_context5.t0 instanceof JOSEError) {\n              debug('existing session was rejected because it could not be decrypted', _context5.t0);\n            } else {\n              debug('unexpected error handling session', _context5.t0);\n            }\n          case 24:\n            if (!req.hasOwnProperty(sessionName) || !req[sessionName]) {\n              attachSessionObject(req, sessionName, {});\n            }\n            if (!isCustomStore) {\n              _context5.next = 37;\n              break;\n            }\n            _context5.t1 = existingSessionValue;\n            if (_context5.t1) {\n              _context5.next = 31;\n              break;\n            }\n            _context5.next = 30;\n            return generateId(req);\n          case 30:\n            _context5.t1 = _context5.sent;\n          case 31:\n            id = _context5.t1;\n            onHeaders(res, function () {\n              return store.setCookie(req[REGENERATED_SESSION_ID] || id, req, res, {\n                iat: iat\n              });\n            });\n            origEnd = res.end;\n            res.end = /*#__PURE__*/function () {\n              var _resEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                var _len,\n                  args,\n                  _key,\n                  _args4 = arguments;\n                return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                  while (1) switch (_context4.prev = _context4.next) {\n                    case 0:\n                      _context4.prev = 0;\n                      _context4.next = 3;\n                      return store.set(id, req, res, {\n                        iat: iat\n                      });\n                    case 3:\n                      for (_len = _args4.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                        args[_key] = _args4[_key];\n                      }\n                      origEnd.call.apply(origEnd, [res].concat(args));\n                      _context4.next = 11;\n                      break;\n                    case 7:\n                      _context4.prev = 7;\n                      _context4.t0 = _context4[\"catch\"](0);\n                      // need to restore the original `end` so that it gets\n                      // called after `next(e)` calls the express error handling mw\n                      res.end = origEnd;\n                      process.nextTick(function () {\n                        return next(_context4.t0);\n                      });\n                    case 11:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }, _callee4, null, [[0, 7]]);\n              }));\n              function resEnd() {\n                return _resEnd.apply(this, arguments);\n              }\n              return resEnd;\n            }();\n            _context5.next = 38;\n            break;\n          case 37:\n            onHeaders(res, function () {\n              return store.setCookie(req, res, {\n                iat: iat\n              });\n            });\n          case 38:\n            return _context5.abrupt(\"return\", next());\n          case 39:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[4, 21]]);\n    }));\n    return function (_x9, _x10, _x11) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nmodule.exports.regenerateSessionStoreId = regenerateSessionStoreId;\nmodule.exports.replaceSession = replaceSession;","map":null,"metadata":{},"sourceType":"script"}