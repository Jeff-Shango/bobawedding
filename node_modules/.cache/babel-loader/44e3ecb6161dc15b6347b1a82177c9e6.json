{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* istanbul ignore file: deprecated */\nvar url_1 = require(\"url\");\nvar keys = ['protocol', 'host', 'hostname', 'port', 'pathname', 'search'];\nexports.default = function (origin, options) {\n  var _a, _b;\n  if (options.path) {\n    if (options.pathname) {\n      throw new TypeError('Parameters `path` and `pathname` are mutually exclusive.');\n    }\n    if (options.search) {\n      throw new TypeError('Parameters `path` and `search` are mutually exclusive.');\n    }\n    if (options.searchParams) {\n      throw new TypeError('Parameters `path` and `searchParams` are mutually exclusive.');\n    }\n  }\n  if (options.search && options.searchParams) {\n    throw new TypeError('Parameters `search` and `searchParams` are mutually exclusive.');\n  }\n  if (!origin) {\n    if (!options.protocol) {\n      throw new TypeError('No URL protocol specified');\n    }\n    origin = \"\".concat(options.protocol, \"//\").concat((_b = (_a = options.hostname) !== null && _a !== void 0 ? _a : options.host) !== null && _b !== void 0 ? _b : '');\n  }\n  var url = new url_1.URL(origin);\n  if (options.path) {\n    var searchIndex = options.path.indexOf('?');\n    if (searchIndex === -1) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.slice(0, searchIndex);\n      options.search = options.path.slice(searchIndex + 1);\n    }\n    delete options.path;\n  }\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    if (options[key]) {\n      url[key] = options[key].toString();\n    }\n  }\n  return url;\n};","map":null,"metadata":{},"sourceType":"script"}