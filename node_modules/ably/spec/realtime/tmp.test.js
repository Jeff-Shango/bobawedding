"use strict";

define(['ably', 'shared_helper', 'async'], function(Ably, helper, async) {
	var currentTime, rest, exports = {},
		_exports = {},
		testClientId = 'clientId',
		utils = helper.Utils,
		i = utils.inspect,
		displayError = helper.displayError,
		closeAndFinish = helper.closeAndFinish,
		monitorConnection = helper.monitorConnection,
		testOnAllTransports = helper.testOnAllTransports,
		BufferUtils = Ably.Realtime.BufferUtils,
		Crypto = Ably.Realtime.Crypto,
		Message = Ably.Realtime.Message,
		displayError = helper.displayError,
		testResourcesPath = helper.testResourcesPath,
		msgpack = (typeof(window) == 'object') ? Ably.msgpack : require('msgpack-js'),
		mixin = helper.Utils.mixin,
		utils = helper.Utils,
		noop = function() {},
		createPM = Ably.Realtime.ProtocolMessage.fromDeserialized,
		simulateDroppedConnection = helper.simulateDroppedConnection,
		availableTransports = helper.availableTransports;

	exports.setupauth = function(test) {
		test.expect(1);
		helper.setupApp(function(err) {
			if(err) {
				test.ok(false, helper.displayError(err));
				test.done();
				return;
			}

			rest = helper.AblyRest();
			rest.time(function(err, time) {
				if(err) {
					test.ok(false, helper.displayError(err));
				} else {
					currentTime = time;
					test.ok(true, 'Obtained time via REST');
				}
				test.done();
			});
		});
	};

	function requestSync(realtime, channelName) {
		realtime.connection.connectionManager.activeProtocol.transport.send({
			action: 16,
			channel: channelName
		});
	}

	function attachChannels(channels, callback) {
		async.map(channels, function(channel, cb) { channel.attach(cb); }, callback);
	}

	function compareMessage(one, two) {
		if(one.encoding != two.encoding) return false;
		if(typeof(one.data) == 'string' && typeof(two.data) == 'string') {
			return one.data == two.data;
		}
		if(BufferUtils.isBuffer(one.data) && BufferUtils.isBuffer(two.data)) {
			return (BufferUtils.bufferCompare(one.data, two.data) === 0);
		}
		return JSON.stringify(one.data) == JSON.stringify(two.data);
	}


	function testEachFixture(test, filename, channelName, testsPerFixture, fixtureTest) {
		if(!Crypto) {
			test.ok(false, 'Encryption not supported');
			test.done();
			return;
		}

		loadTestData(testResourcesPath + filename, function(err, testData) {
			if(err) {
				test.ok(false, 'Unable to get test assets; err = ' + displayError(err));
				return;
			}
			var realtime = helper.AblyRealtime();
			var key = BufferUtils.base64Decode(testData.key);
			var iv = BufferUtils.base64Decode(testData.iv);
			var channel = realtime.channels.get(channelName, {cipher: {key: key, iv: iv}});

			test.expect(testData.items.length * testsPerFixture);
			for(var i = 0; i < testData.items.length; i++) {
				var item = testData.items[i];

				/* read messages from test data */
				var testMessage = Message.fromValues(item.encoded);
				var encryptedMessage = Message.fromValues(item.encrypted);
				/* decode (ie remove any base64 encoding). Will throw when
				 * it gets to the cipher part of the encoding, so wrap in try/catch */
				try { Message.decode(testMessage); } catch(_) {}
				try { Message.decode(encryptedMessage); } catch(_) {}
				/* reset channel cipher, to ensure it uses the given iv */
				channel.setOptions({cipher: {key: key, iv: iv}});

				fixtureTest(channel.channelOptions, testMessage, encryptedMessage, item.msgpack);
			}
			closeAndFinish(test, realtime);
		});
	}

	var publishIntervalHelper = function(currentMessageNum, channel, dataFn, onPublish){
			return function(currentMessageNum) {
				console.log('sending: ' + currentMessageNum);
				channel.publish('event0', dataFn(), function() {
					console.log('publish callback called');
					onPublish();
				});
			};
		},
		publishAtIntervals = function(numMessages, channel, dataFn, onPublish){
			for(var i = numMessages; i > 0; i--) {
				setTimeout(publishIntervalHelper(i, channel, dataFn, onPublish), 2*i);
			}
		};


	function _multiple_send(test, text, iterations, delay) {
		if(!Crypto) {
			test.ok(false, 'Encryption not supported');
			test.done();
			return;
		}

		var realtime = helper.AblyRealtime({ useBinaryProtocol: !text});
		test.expect(iterations + 3);
		var channelName = 'multiple_send_' + (text ? 'text_' : 'binary_') + iterations + '_' + delay,
			channel = realtime.channels.get(channelName),
			messageText = 'Test message (' + channelName + ')';

		Crypto.generateRandomKey(128, function(err, key) {
			channel.setOptions({cipher: {key: key}}, function(err) {
				if(err) {
					test.ok(false, 'Unable to set channel options; err = ' + displayError(err));
					closeAndFinish(test, realtime);
					return;
				}
				test.equal(channel.channelOptions.cipher.algorithm, 'aes');
				test.equal(channel.channelOptions.cipher.keyLength, 128);
				function sendAll(sendCb) {
					var sent = 0;
					var sendOnce = function() {
						channel.publish('event0', messageText);
						if(++sent == iterations) {
							sendCb(null);
							return;
						}
						setTimeout(sendOnce, delay);
					};
					sendOnce();
				}
				function recvAll(recvCb) {
					var received = 0;
					channel.subscribe('event0', function(msg) {
						test.ok(msg.data == messageText);
						if(++received == iterations)
							recvCb(null);
					});
				}
				async.parallel([sendAll, recvAll], function(err) {
					if(err) {
						test.ok(false, 'Error sending messages; err = ' + displayError(err));
					}
					test.ok('Verify all messages received');
					closeAndFinish(test, realtime);
				});
			});
		});
	}

	function extractClientIds(presenceSet) {
		return utils.arrMap(presenceSet, function(presmsg) {
			return presmsg.clientId;
		}).sort();
	}

	function extractMember(presenceSet, clientId) {
		return helper.arrFind(presenceSet, function(member) {
			return member.clientId === clientId;
		});
	}

	/***************************************************/

	exports.presence_sync_interruptus = function(test) {
		if(helper.bestTransport === 'jsonp') {
			/* JSONP can't cope with entering 110 people in one go. */
			console.log("Skipping presence_sync_interruptus test (jsonp)");
			test.done();
			return;
		}
		test.expect(1);
		var channelName = "presence_sync_interruptus";
		var interrupterClientId = "dark_horse";
		var enterer = helper.AblyRealtime();
		var syncer = helper.AblyRealtime({log: {level: 4}});
		var entererChannel = enterer.channels.get(channelName);
		var syncerChannel = syncer.channels.get(channelName);

		function waitForBothConnect(cb) {
			async.parallel([
				function(connectCb) { enterer.connection.on('connected', connectCb); },
				function(connectCb) { syncer.connection.on('connected', connectCb); }
			], function() { cb(); });
		}

		async.series([
			waitForBothConnect,
			function(cb) { entererChannel.attach(cb); },
			function(cb) {
				async.times(110, function(i, presCb) {
					entererChannel.presence.enterClient(i.toString(), null, presCb);
				}, cb);
			},
			function(cb) {
				var originalOnMessage = syncerChannel.onMessage;
				syncerChannel.onMessage = function(message) {
					originalOnMessage.apply(this, arguments);
					/* Inject an additional presence message after the first sync */
					if(message.action === 16) {
						syncerChannel.onMessage = originalOnMessage;
						syncerChannel.onMessage({
							"action": 14,
							"id": "messageid:0",
							"connectionId": "connid",
							"timestamp": 2000000000000,
							"presence": [{
								"clientId": interrupterClientId,
								"action": 'enter'
							}]});
					}
				};
				syncerChannel.attach(cb);
			},
			function(cb) {
				syncerChannel.presence.get(function(err, presenceSet) {
					test.equal(presenceSet && presenceSet.length, 111, 'Check everyoneâ€™s in presence set');
					cb(err);
				});
			}
		], function(err) {
			if(err) {
				test.ok(false, helper.displayError(err));
			}
			closeAndFinish(test, [enterer, syncer]);
		});
	};


	return module.exports = helper.withTimeout(exports);
});
